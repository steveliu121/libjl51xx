//reg_swcore.h
/*
* Automatically generated by gen_c_api.py, don't edit it
*/
#ifndef __JL_REG_SWCORE_H__
#define __JL_REG_SWCORE_H__

#include <jl_types.h>
#include "jl51xx/jl51xx_drv_switch.h"

#define SWCORE_BASE                                                                      ((jl_uint32)0x00100000U)
#define SWCORE_BLOCK_SIZE                                                                ((jl_uint32)0x00010000U)

#define CORE_VERSION_OFFSET                                                          ((jl_uint32)0x00000000U)
#define CORE_VERSION_NUM                                                             ((jl_uint32)0x00000001U)
typedef union CORE_VERSION_u {
    struct {
        jl_uint32 version:32;                                               //[31: 0]
    } bf;
    jl_uint32 val[1];
} CORE_VERSION_t;

#define BUFFER_FREE_OFFSET                                                           ((jl_uint32)0x00000001U)
#define BUFFER_FREE_NUM                                                              ((jl_uint32)0x00000001U)
typedef union BUFFER_FREE_u {
    struct {
        jl_uint32 cells:10;                                                 //[ 9: 0]
    } bf;
    jl_uint32 val[1];
} BUFFER_FREE_t;

#define TICK_CONFIGURATION_OFFSET                                                    ((jl_uint32)0x00000002U)
#define TICK_CONFIGURATION_NUM                                                       ((jl_uint32)0x00000001U)
typedef union TICK_CONFIGURATION_u {
    struct {
        jl_uint32 clk_divider:14;                                           //[13: 0]
        jl_uint32 step_divider:4;                                           //[17:14]
    } bf;
    jl_uint32 val[1];
} TICK_CONFIGURATION_t;

#define SCRATCH_OFFSET                                                               ((jl_uint32)0x00000003U)
#define SCRATCH_NUM                                                                  ((jl_uint32)0x00000001U)
typedef union SCRATCH_u {
    struct {
        jl_uint64 scratch:64;                                               //[63: 0]
    } bf;
    jl_uint32 val[2];
} SCRATCH_t;

#define MAC_RX_BROKEN_PACKETS_OFFSET                                                 ((jl_uint32)0x00000005U)
#define MAC_RX_BROKEN_PACKETS_NUM                                                    ((jl_uint32)0x0000000AU)
typedef union MAC_RX_BROKEN_PACKETS_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} MAC_RX_BROKEN_PACKETS_t;

#define MAC_RX_SHORT_PACKET_DROP_OFFSET                                              ((jl_uint32)0x0000000FU)
#define MAC_RX_SHORT_PACKET_DROP_NUM                                                 ((jl_uint32)0x0000000AU)
typedef union MAC_RX_SHORT_PACKET_DROP_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} MAC_RX_SHORT_PACKET_DROP_t;

#define L2_BROADCAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET                         ((jl_uint32)0x00000019U)
#define L2_BROADCAST_STORM_CONTROL_RATE_CONFIGURATION_NUM                            ((jl_uint32)0x0000000AU)
typedef union L2_BROADCAST_STORM_CONTROL_RATE_CONFIGURATION_u {
    struct {
        jl_uint32 packets_not_bytes:1;                                      //[ 0: 0]
        jl_uint32 tokens:12;                                                //[12: 1]
        jl_uint32 tick:3;                                                   //[15:13]
        jl_uint32 ifg_correction:8;                                         //[23:16]
    } bf;
    jl_uint32 val[1];
} L2_BROADCAST_STORM_CONTROL_RATE_CONFIGURATION_t;

#define L2_BROADCAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_OFFSET              ((jl_uint32)0x00000023U)
#define L2_BROADCAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_NUM                 ((jl_uint32)0x0000000AU)
typedef union L2_BROADCAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_u {
    struct {
        jl_uint32 bucket_capacity:16;                                       //[15: 0]
    } bf;
    jl_uint32 val[1];
} L2_BROADCAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_t;

#define L2_BROADCAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_OFFSET             ((jl_uint32)0x0000002DU)
#define L2_BROADCAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_NUM                ((jl_uint32)0x0000000AU)
typedef union L2_BROADCAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_u {
    struct {
        jl_uint32 threshold:16;                                             //[15: 0]
    } bf;
    jl_uint32 val[1];
} L2_BROADCAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_t;

#define L2_BROADCAST_STORM_CONTROL_ENABLE_OFFSET                                     ((jl_uint32)0x00000037U)
#define L2_BROADCAST_STORM_CONTROL_ENABLE_NUM                                        ((jl_uint32)0x00000001U)
typedef union L2_BROADCAST_STORM_CONTROL_ENABLE_u {
    struct {
        jl_uint32 enable:10;                                                //[ 9: 0]
    } bf;
    jl_uint32 val[1];
} L2_BROADCAST_STORM_CONTROL_ENABLE_t;

#define L2_MULTICAST_STORM_CONTROL_RATE_CONFIGURATION_OFFSET                         ((jl_uint32)0x00000038U)
#define L2_MULTICAST_STORM_CONTROL_RATE_CONFIGURATION_NUM                            ((jl_uint32)0x0000000AU)
typedef union L2_MULTICAST_STORM_CONTROL_RATE_CONFIGURATION_u {
    struct {
        jl_uint32 packets_not_bytes:1;                                      //[ 0: 0]
        jl_uint32 tokens:12;                                                //[12: 1]
        jl_uint32 tick:3;                                                   //[15:13]
        jl_uint32 ifg_correction:8;                                         //[23:16]
    } bf;
    jl_uint32 val[1];
} L2_MULTICAST_STORM_CONTROL_RATE_CONFIGURATION_t;

#define L2_MULTICAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_OFFSET              ((jl_uint32)0x00000042U)
#define L2_MULTICAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_NUM                 ((jl_uint32)0x0000000AU)
typedef union L2_MULTICAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_u {
    struct {
        jl_uint32 bucket_capacity:16;                                       //[15: 0]
    } bf;
    jl_uint32 val[1];
} L2_MULTICAST_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_t;

#define L2_MULTICAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_OFFSET             ((jl_uint32)0x0000004CU)
#define L2_MULTICAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_NUM                ((jl_uint32)0x0000000AU)
typedef union L2_MULTICAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_u {
    struct {
        jl_uint32 threshold:16;                                             //[15: 0]
    } bf;
    jl_uint32 val[1];
} L2_MULTICAST_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_t;

#define L2_MULTICAST_STORM_CONTROL_ENABLE_OFFSET                                     ((jl_uint32)0x00000056U)
#define L2_MULTICAST_STORM_CONTROL_ENABLE_NUM                                        ((jl_uint32)0x00000001U)
typedef union L2_MULTICAST_STORM_CONTROL_ENABLE_u {
    struct {
        jl_uint32 enable:10;                                                //[ 9: 0]
    } bf;
    jl_uint32 val[1];
} L2_MULTICAST_STORM_CONTROL_ENABLE_t;

#define L2_FLOODING_STORM_CONTROL_RATE_CONFIGURATION_OFFSET                          ((jl_uint32)0x00000057U)
#define L2_FLOODING_STORM_CONTROL_RATE_CONFIGURATION_NUM                             ((jl_uint32)0x0000000AU)
typedef union L2_FLOODING_STORM_CONTROL_RATE_CONFIGURATION_u {
    struct {
        jl_uint32 packets_not_bytes:1;                                      //[ 0: 0]
        jl_uint32 tokens:12;                                                //[12: 1]
        jl_uint32 tick:3;                                                   //[15:13]
        jl_uint32 ifg_correction:8;                                         //[23:16]
    } bf;
    jl_uint32 val[1];
} L2_FLOODING_STORM_CONTROL_RATE_CONFIGURATION_t;

#define L2_FLOODING_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_OFFSET               ((jl_uint32)0x00000061U)
#define L2_FLOODING_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_NUM                  ((jl_uint32)0x0000000AU)
typedef union L2_FLOODING_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_u {
    struct {
        jl_uint32 bucket_capacity:16;                                       //[15: 0]
    } bf;
    jl_uint32 val[1];
} L2_FLOODING_STORM_CONTROL_BUCKET_CAPACITY_CONFIGURATION_t;

#define L2_FLOODING_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_OFFSET              ((jl_uint32)0x0000006BU)
#define L2_FLOODING_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_NUM                 ((jl_uint32)0x0000000AU)
typedef union L2_FLOODING_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_u {
    struct {
        jl_uint32 threshold:16;                                             //[15: 0]
    } bf;
    jl_uint32 val[1];
} L2_FLOODING_STORM_CONTROL_BUCKET_THRESHOLD_CONFIGURATION_t;

#define L2_FLOODING_STORM_CONTROL_ENABLE_OFFSET                                      ((jl_uint32)0x00000075U)
#define L2_FLOODING_STORM_CONTROL_ENABLE_NUM                                         ((jl_uint32)0x00000001U)
typedef union L2_FLOODING_STORM_CONTROL_ENABLE_u {
    struct {
        jl_uint32 enable:10;                                                //[ 9: 0]
    } bf;
    jl_uint32 val[1];
} L2_FLOODING_STORM_CONTROL_ENABLE_t;

#define LEARNING_AND_AGING_ENABLE_OFFSET                                             ((jl_uint32)0x00000076U)
#define LEARNING_AND_AGING_ENABLE_NUM                                                ((jl_uint32)0x00000001U)
typedef union LEARNING_AND_AGING_ENABLE_u {
    struct {
        jl_uint32 learning_enable:1;                                        //[ 0: 0]
        jl_uint32 aging_enable:1;                                           //[ 1: 1]
    } bf;
    jl_uint32 val[1];
} LEARNING_AND_AGING_ENABLE_t;

#define DEFAULT_LEARNING_STATUS_OFFSET                                               ((jl_uint32)0x00000077U)
#define DEFAULT_LEARNING_STATUS_NUM                                                  ((jl_uint32)0x00000001U)
typedef union DEFAULT_LEARNING_STATUS_u {
    struct {
        jl_uint32 valid:1;                                                  //[ 0: 0]
        jl_uint32 statics:1;                                                //[ 1: 1]
        jl_uint32 hit:1;                                                    //[ 2: 2]
    } bf;
    jl_uint32 val[1];
} DEFAULT_LEARNING_STATUS_t;

#define TIME_TO_AGE_OFFSET                                                           ((jl_uint32)0x00000078U)
#define TIME_TO_AGE_NUM                                                              ((jl_uint32)0x00000001U)
typedef union TIME_TO_AGE_u {
    struct {
        jl_uint64 tick_cnt:32;                                              //[31: 0]
        jl_uint64 tick:3;                                                   //[34:32]
    } bf;
    jl_uint32 val[2];
} TIME_TO_AGE_t;

#define L2_AGING_COLLISION_SHADOW_TABLE_OFFSET                                       ((jl_uint32)0x0000007AU)
#define L2_AGING_COLLISION_SHADOW_TABLE_NUM                                          ((jl_uint32)0x00000010U)
typedef union L2_AGING_COLLISION_SHADOW_TABLE_u {
    struct {
        jl_uint32 valid:1;                                                  //[ 0: 0]
        jl_uint32 stat:1;                                                   //[ 1: 1]
        jl_uint32 hit:1;                                                    //[ 2: 2]
    } bf;
    jl_uint32 val[1];
} L2_AGING_COLLISION_SHADOW_TABLE_t;

#define L2_AGING_STATUS_SHADOW_TABLE_OFFSET                                          ((jl_uint32)0x0000008AU)
#define L2_AGING_STATUS_SHADOW_TABLE_NUM                                             ((jl_uint32)0x00000800U)
typedef union L2_AGING_STATUS_SHADOW_TABLE_u {
    struct {
        jl_uint32 valid:1;                                                  //[ 0: 0]
    } bf;
    jl_uint32 val[1];
} L2_AGING_STATUS_SHADOW_TABLE_t;

#define SP_OVERFLOW_DROP_OFFSET                                                      ((jl_uint32)0x0000088AU)
#define SP_OVERFLOW_DROP_NUM                                                         ((jl_uint32)0x0000000AU)
typedef union SP_OVERFLOW_DROP_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} SP_OVERFLOW_DROP_t;

#define IPP_BROKEN_PACKETS_OFFSET                                                    ((jl_uint32)0x00000894U)
#define IPP_BROKEN_PACKETS_NUM                                                       ((jl_uint32)0x00000001U)
typedef union IPP_BROKEN_PACKETS_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} IPP_BROKEN_PACKETS_t;

#define IPP_PM_DROP_OFFSET                                                           ((jl_uint32)0x00000895U)
#define IPP_PM_DROP_NUM                                                              ((jl_uint32)0x00000001U)
typedef union IPP_PM_DROP_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} IPP_PM_DROP_t;

#define UNKNOWN_INGRESS_DROP_OFFSET                                                  ((jl_uint32)0x00000896U)
#define UNKNOWN_INGRESS_DROP_NUM                                                     ((jl_uint32)0x00000001U)
typedef union UNKNOWN_INGRESS_DROP_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} UNKNOWN_INGRESS_DROP_t;

#define EMPTY_MASK_DROP_OFFSET                                                       ((jl_uint32)0x00000897U)
#define EMPTY_MASK_DROP_NUM                                                          ((jl_uint32)0x00000001U)
typedef union EMPTY_MASK_DROP_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} EMPTY_MASK_DROP_t;

#define INGRESS_SPANNING_TREE_DROP_LISTEN_OFFSET                                     ((jl_uint32)0x00000898U)
#define INGRESS_SPANNING_TREE_DROP_LISTEN_NUM                                        ((jl_uint32)0x00000001U)
typedef union INGRESS_SPANNING_TREE_DROP_LISTEN_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} INGRESS_SPANNING_TREE_DROP_LISTEN_t;

#define INGRESS_SPANNING_TREE_DROP_LEARNING_OFFSET                                   ((jl_uint32)0x00000899U)
#define INGRESS_SPANNING_TREE_DROP_LEARNING_NUM                                      ((jl_uint32)0x00000001U)
typedef union INGRESS_SPANNING_TREE_DROP_LEARNING_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} INGRESS_SPANNING_TREE_DROP_LEARNING_t;

#define INGRESS_SPANNING_TREE_DROP_BLOCKING_OFFSET                                   ((jl_uint32)0x0000089AU)
#define INGRESS_SPANNING_TREE_DROP_BLOCKING_NUM                                      ((jl_uint32)0x00000001U)
typedef union INGRESS_SPANNING_TREE_DROP_BLOCKING_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} INGRESS_SPANNING_TREE_DROP_BLOCKING_t;

#define L2_FLAG_DROP_OFFSET                                                          ((jl_uint32)0x0000089BU)
#define L2_FLAG_DROP_NUM                                                             ((jl_uint32)0x00000001U)
typedef union L2_FLAG_DROP_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} L2_FLAG_DROP_t;

#define INGRESS_L2_ACL_DROP_OFFSET                                                   ((jl_uint32)0x0000089CU)
#define INGRESS_L2_ACL_DROP_NUM                                                      ((jl_uint32)0x00000001U)
typedef union INGRESS_L2_ACL_DROP_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} INGRESS_L2_ACL_DROP_t;

#define VLAN_MEMBER_DROP_OFFSET                                                      ((jl_uint32)0x0000089DU)
#define VLAN_MEMBER_DROP_NUM                                                         ((jl_uint32)0x00000001U)
typedef union VLAN_MEMBER_DROP_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} VLAN_MEMBER_DROP_t;

#define MINIMUM_ALLOWED_VLAN_DROP_OFFSET                                             ((jl_uint32)0x0000089EU)
#define MINIMUM_ALLOWED_VLAN_DROP_NUM                                                ((jl_uint32)0x00000001U)
typedef union MINIMUM_ALLOWED_VLAN_DROP_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} MINIMUM_ALLOWED_VLAN_DROP_t;

#define MAXIMUM_ALLOWED_VLAN_DROP_OFFSET                                             ((jl_uint32)0x0000089FU)
#define MAXIMUM_ALLOWED_VLAN_DROP_NUM                                                ((jl_uint32)0x00000001U)
typedef union MAXIMUM_ALLOWED_VLAN_DROP_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} MAXIMUM_ALLOWED_VLAN_DROP_t;

#define IPP_PACKET_HEAD_COUNTER_OFFSET                                               ((jl_uint32)0x000008A0U)
#define IPP_PACKET_HEAD_COUNTER_NUM                                                  ((jl_uint32)0x00000001U)
typedef union IPP_PACKET_HEAD_COUNTER_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} IPP_PACKET_HEAD_COUNTER_t;

#define IPP_PACKET_TAIL_COUNTER_OFFSET                                               ((jl_uint32)0x000008A1U)
#define IPP_PACKET_TAIL_COUNTER_NUM                                                  ((jl_uint32)0x00000001U)
typedef union IPP_PACKET_TAIL_COUNTER_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} IPP_PACKET_TAIL_COUNTER_t;

#define L2_AGING_TABLE_OFFSET                                                        ((jl_uint32)0x000008A2U)
#define L2_AGING_TABLE_NUM                                                           ((jl_uint32)0x00000800U)
typedef union L2_AGING_TABLE_u {
    struct {
        jl_uint32 valid:1;                                                  //[ 0: 0]
        jl_uint32 stat:1;                                                   //[ 1: 1]
        jl_uint32 hit:1;                                                    //[ 2: 2]
    } bf;
    jl_uint32 val[1];
} L2_AGING_TABLE_t;

#define L2_DA_HASH_LOOKUP_TABLE_OFFSET                                               ((jl_uint32)0x000010A2U)
#define L2_DA_HASH_LOOKUP_TABLE_NUM                                                  ((jl_uint32)0x00000800U)
typedef union L2_DA_HASH_LOOKUP_TABLE_u {
    struct {
        jl_uint64 mac_addr:48;                                              //[47: 0]
        jl_uint64 gid:4;                                                    //[51:48]
    } bf;
    jl_uint32 val[2];
} L2_DA_HASH_LOOKUP_TABLE_t;

#define L2_DESTINATION_TABLE_OFFSET                                                  ((jl_uint32)0x000020A2U)
#define L2_DESTINATION_TABLE_NUM                                                     ((jl_uint32)0x00000810U)
typedef union L2_DESTINATION_TABLE_u {
    struct {
        jl_uint32 uc:1;                                                     //[ 0: 0]
        jl_uint32 dest_port_or_mc_addr:6;                                   //[ 6: 1]
        jl_uint32 pkt_drop:1;                                               //[ 7: 7]
    } bf;
    jl_uint32 val[1];
} L2_DESTINATION_TABLE_t;

#define SOURCE_PORT_TABLE_OFFSET                                                     ((jl_uint32)0x000028B2U)
#define SOURCE_PORT_TABLE_NUM                                                        ((jl_uint32)0x0000000AU)
typedef union SOURCE_PORT_TABLE_u {
    struct {
        jl_uint64 prio_from_l3:1;                                           //[ 0: 0]
        jl_uint64 vlan_single_op:3;                                         //[ 3: 1]
        jl_uint64 vid_sel:2;                                                //[ 5: 4]
        jl_uint64 cfi_dei_sel:2;                                            //[ 7: 6]
        jl_uint64 pcp_sel:2;                                                //[ 9: 8]
        jl_uint64 type_sel:2;                                               //[11:10]
        jl_uint64 vlan_assignment:2;                                        //[13:12]
        jl_uint64 default_vid:12;                                           //[25:14]
        jl_uint64 default_cfi_dei:1;                                        //[26:26]
        jl_uint64 default_pcp:3;                                            //[29:27]
        jl_uint64 min_allowed_vlans:2;                                      //[31:30]
        jl_uint64 max_allowed_vlans:2;                                      //[33:32]
        jl_uint64 learn_multicast_sa_mac:1;                                 //[34:34]
        jl_uint64 input_mirror_enabled:1;                                   //[35:35]
        jl_uint64 dest_input_mirror:4;                                      //[39:36]
        jl_uint64 spt:3;                                                    //[42:40]
    } bf;
    jl_uint32 val[2];
} SOURCE_PORT_TABLE_t;

#define L2_LOOKUP_COLLISION_TABLE_MASKS_OFFSET                                       ((jl_uint32)0x000028C6U)
#define L2_LOOKUP_COLLISION_TABLE_MASKS_NUM                                          ((jl_uint32)0x00000004U)
typedef union L2_LOOKUP_COLLISION_TABLE_MASKS_u {
    struct {
        jl_uint64 mac_addr:48;                                              //[47: 0]
        jl_uint64 gid:4;                                                    //[51:48]
    } bf;
    jl_uint32 val[2];
} L2_LOOKUP_COLLISION_TABLE_MASKS_t;

#define L2_LOOKUP_COLLISION_TABLE_OFFSET                                             ((jl_uint32)0x000028CEU)
#define L2_LOOKUP_COLLISION_TABLE_NUM                                                ((jl_uint32)0x00000010U)
typedef union L2_LOOKUP_COLLISION_TABLE_u {
    struct {
        jl_uint64 mac_addr:48;                                              //[47: 0]
        jl_uint64 gid:4;                                                    //[51:48]
    } bf;
    jl_uint32 val[2];
} L2_LOOKUP_COLLISION_TABLE_t;

#define VLAN_TABLE_OFFSET                                                            ((jl_uint32)0x000028EEU)
#define VLAN_TABLE_NUM                                                               ((jl_uint32)0x00000010U)
typedef union VLAN_TABLE_u {
    struct {
        jl_uint64 vlan_port_mask:10;                                        //[ 9: 0]
        jl_uint64 gid:4;                                                    //[13:10]
        jl_uint64 vlan_single_op:3;                                         //[16:14]
        jl_uint64 vid_sel:2;                                                //[18:17]
        jl_uint64 cfi_dei_sel:2;                                            //[20:19]
        jl_uint64 pcp_sel:2;                                                //[22:21]
        jl_uint64 type_sel:2;                                               //[24:23]
        jl_uint64 vid:12;                                                   //[36:25]
        jl_uint64 pcp:3;                                                    //[39:37]
        jl_uint64 cfi_dei:1;                                                //[40:40]
    } bf;
    jl_uint32 val[2];
} VLAN_TABLE_t;

#define INGRESS_L2_ACL_RESULT_OPERATION_ENTRIES_OFFSET                               ((jl_uint32)0x0000290EU)
#define INGRESS_L2_ACL_RESULT_OPERATION_ENTRIES_NUM                                  ((jl_uint32)0x00000020U)
typedef union INGRESS_L2_ACL_RESULT_OPERATION_ENTRIES_u {
    struct {
        jl_uint64 drop_enable:1;                                            //[ 0: 0]
        jl_uint64 send_to_cpu:1;                                            //[ 1: 1]
        jl_uint64 force_queue:1;                                            //[ 2: 2]
        jl_uint64 e_queue:2;                                                //[ 4: 3]
        jl_uint64 send_to_port:1;                                           //[ 5: 5]
        jl_uint64 dest_port:4;                                              //[ 9: 6]
        jl_uint64 force_vid_valid:1;                                        //[10:10]
        jl_uint64 force_vid:5;                                              //[15:11]
        jl_uint64 update_counter:1;                                         //[16:16]
        jl_uint64 counter:5;                                                //[21:17]
        jl_uint64 update_cfi_dei:1;                                         //[22:22]
        jl_uint64 new_cfi_dei_value:1;                                      //[23:23]
        jl_uint64 update_pcp:1;                                             //[24:24]
        jl_uint64 new_pcp_value:3;                                          //[27:25]
        jl_uint64 update_vid:1;                                             //[28:28]
        jl_uint64 new_vid_value:12;                                         //[40:29]
    } bf;
    jl_uint32 val[2];
} INGRESS_L2_ACL_RESULT_OPERATION_ENTRIES_t;

#define SEND_TO_CPU_OFFSET                                                           ((jl_uint32)0x0000294EU)
#define SEND_TO_CPU_NUM                                                              ((jl_uint32)0x00000001U)
typedef union SEND_TO_CPU_u {
    struct {
        jl_uint64 allow_bpdu:1;                                             //[ 0: 0]
        jl_uint64 allow_rst_bpdu:1;                                         //[ 1: 1]
        jl_uint64 unique_cpu_mac:1;                                         //[ 2: 2]
        jl_uint64 cpu_mac_addr:48;                                          //[50: 3]
    } bf;
    jl_uint32 val[2];
} SEND_TO_CPU_t;

#define INGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_OFFSET                                    ((jl_uint32)0x00002950U)
#define INGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_NUM                                       ((jl_uint32)0x00000001U)
typedef union INGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_u {
    struct {
        jl_uint32 type_value:16;                                            //[15: 0]
        jl_uint32 type:1;                                                   //[16:16]
        jl_uint32 valid:1;                                                  //[17:17]
    } bf;
    jl_uint32 val[1];
} INGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_t;

#define FORCE_NON_VLAN_PACKET_TO_SPECIFIC_EGRESS_QUEUE_OFFSET                        ((jl_uint32)0x00002951U)
#define FORCE_NON_VLAN_PACKET_TO_SPECIFIC_EGRESS_QUEUE_NUM                           ((jl_uint32)0x00000001U)
typedef union FORCE_NON_VLAN_PACKET_TO_SPECIFIC_EGRESS_QUEUE_u {
    struct {
        jl_uint32 force_queue:1;                                            //[ 0: 0]
        jl_uint32 e_queue:2;                                                //[ 2: 1]
    } bf;
    jl_uint32 val[1];
} FORCE_NON_VLAN_PACKET_TO_SPECIFIC_EGRESS_QUEUE_t;

#define FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_EGRESS_QUEUE_OFFSET                      ((jl_uint32)0x00002952U)
#define FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_EGRESS_QUEUE_NUM                         ((jl_uint32)0x00000001U)
typedef union FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_EGRESS_QUEUE_u {
    struct {
        jl_uint32 force_queue:1;                                            //[ 0: 0]
        jl_uint32 e_queue:2;                                                //[ 2: 1]
    } bf;
    jl_uint32 val[1];
} FORCE_UNKNOWN_L3_PACKET_TO_SPECIFIC_EGRESS_QUEUE_t;

#define EGRESS_SPANNING_TREE_STATE_OFFSET                                            ((jl_uint32)0x00002953U)
#define EGRESS_SPANNING_TREE_STATE_NUM                                               ((jl_uint32)0x00000001U)
typedef union EGRESS_SPANNING_TREE_STATE_u {
    struct {
        jl_uint32 spt_state:30;                                             //[29: 0]
    } bf;
    jl_uint32 val[1];
} EGRESS_SPANNING_TREE_STATE_t;

#define FORWARD_FROM_CPU_OFFSET                                                      ((jl_uint32)0x00002954U)
#define FORWARD_FROM_CPU_NUM                                                         ((jl_uint32)0x00000001U)
typedef union FORWARD_FROM_CPU_u {
    struct {
        jl_uint32 enable:1;                                                 //[ 0: 0]
    } bf;
    jl_uint32 val[1];
} FORWARD_FROM_CPU_t;

#define L2_MULTICAST_HANDLING_OFFSET                                                 ((jl_uint32)0x00002955U)
#define L2_MULTICAST_HANDLING_NUM                                                    ((jl_uint32)0x00000001U)
typedef union L2_MULTICAST_HANDLING_u {
    struct {
        jl_uint32 excl_ipv4_mc:1;                                           //[ 0: 0]
        jl_uint32 excl_ipv6_mc:1;                                           //[ 1: 1]
        jl_uint32 incl_l2_mc_lut:1;                                         //[ 2: 2]
        jl_uint32 incl_multi_ports:1;                                       //[ 3: 3]
    } bf;
    jl_uint32 val[1];
} L2_MULTICAST_HANDLING_t;

#define DEBUG_SRCPORT_OFFSET                                                         ((jl_uint32)0x00002956U)
#define DEBUG_SRCPORT_NUM                                                            ((jl_uint32)0x00000001U)
typedef union DEBUG_SRCPORT_u {
    struct {
        jl_uint32 value:32;                                                 //[31: 0]
    } bf;
    jl_uint32 val[1];
} DEBUG_SRCPORT_t;

#define DEBUG_DSTPORTMASK_OFFSET                                                     ((jl_uint32)0x00002957U)
#define DEBUG_DSTPORTMASK_NUM                                                        ((jl_uint32)0x00000001U)
typedef union DEBUG_DSTPORTMASK_u {
    struct {
        jl_uint32 value:10;                                                 //[ 9: 0]
    } bf;
    jl_uint32 val[1];
} DEBUG_DSTPORTMASK_t;

#define ENABLE_ENQUEUE_TO_PORTS_AND_QUEUES_OFFSET                                    ((jl_uint32)0x00002958U)
#define ENABLE_ENQUEUE_TO_PORTS_AND_QUEUES_NUM                                       ((jl_uint32)0x0000000AU)
typedef union ENABLE_ENQUEUE_TO_PORTS_AND_QUEUES_u {
    struct {
        jl_uint32 q_on:4;                                                   //[ 3: 0]
    } bf;
    jl_uint32 val[1];
} ENABLE_ENQUEUE_TO_PORTS_AND_QUEUES_t;

#define L2_MULTICAST_TABLE_OFFSET                                                    ((jl_uint32)0x00002962U)
#define L2_MULTICAST_TABLE_NUM                                                       ((jl_uint32)0x00000040U)
typedef union L2_MULTICAST_TABLE_u {
    struct {
        jl_uint32 mc_port_mask:10;                                          //[ 9: 0]
    } bf;
    jl_uint32 val[1];
} L2_MULTICAST_TABLE_t;

#define L2_AGING_COLLISION_TABLE_OFFSET                                              ((jl_uint32)0x000029A2U)
#define L2_AGING_COLLISION_TABLE_NUM                                                 ((jl_uint32)0x00000010U)
typedef union L2_AGING_COLLISION_TABLE_u {
    struct {
        jl_uint32 valid:1;                                                  //[ 0: 0]
        jl_uint32 stat:1;                                                   //[ 1: 1]
        jl_uint32 hit:1;                                                    //[ 2: 2]
    } bf;
    jl_uint32 val[1];
} L2_AGING_COLLISION_TABLE_t;

#define MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET                          ((jl_uint32)0x000029B2U)
#define MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_NUM                             ((jl_uint32)0x00000008U)
typedef union MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_u {
    struct {
        jl_uint32 p_queue:2;                                                //[ 1: 0]
    } bf;
    jl_uint32 val[1];
} MPLS_EXP_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_t;

#define IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET                            ((jl_uint32)0x000029BAU)
#define IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_NUM                               ((jl_uint32)0x00000100U)
typedef union IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_u {
    struct {
        jl_uint32 p_queue:2;                                                //[ 1: 0]
    } bf;
    jl_uint32 val[1];
} IP_TOS_FIELD_TO_EGRESS_QUEUE_MAPPING_TABLE_t;

#define VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_OFFSET                                ((jl_uint32)0x00002ABAU)
#define VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_NUM                                   ((jl_uint32)0x00000008U)
typedef union VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_u {
    struct {
        jl_uint32 p_queue:2;                                                //[ 1: 0]
    } bf;
    jl_uint32 val[1];
} VLAN_PCP_TO_EGRESS_QUEUE_MAPPING_TABLE_t;

#define INGRESS_VID_TRANSLATION_ACTION_OFFSET                                        ((jl_uint32)0x00002AC2U)
#define INGRESS_VID_TRANSLATION_ACTION_NUM                                           ((jl_uint32)0x0000000AU)
typedef union INGRESS_VID_TRANSLATION_ACTION_u {
    struct {
        jl_uint32 use_lookup:1;                                             //[ 0: 0]
        jl_uint32 miss_vid:12;                                              //[12: 1]
        jl_uint32 force_vid_valid:1;                                        //[13:13]
        jl_uint32 force_vid:12;                                             //[25:14]
    } bf;
    jl_uint32 val[1];
} INGRESS_VID_TRANSLATION_ACTION_t;

#define VID_TO_VLAN_TABLE_TCAM_ANSWER_OFFSET                                         ((jl_uint32)0x00002ACCU)
#define VID_TO_VLAN_TABLE_TCAM_ANSWER_NUM                                            ((jl_uint32)0x00000010U)
typedef union VID_TO_VLAN_TABLE_TCAM_ANSWER_u {
    struct {
        jl_uint32 ptr:4;                                                    //[ 3: 0]
    } bf;
    jl_uint32 val[1];
} VID_TO_VLAN_TABLE_TCAM_ANSWER_t;

#define VID_TO_VLAN_TABLE_TCAM_OFFSET                                                ((jl_uint32)0x00002ADCU)
#define VID_TO_VLAN_TABLE_TCAM_NUM                                                   ((jl_uint32)0x00000010U)
typedef union VID_TO_VLAN_TABLE_TCAM_u {
    struct {
        jl_uint32 valid:1;                                                  //[ 0: 0]
        jl_uint32 ingress_vid_mask:12;                                      //[12: 1]
        jl_uint32 ingress_vid:12;                                           //[24:13]
    } bf;
    jl_uint32 val[1];
} VID_TO_VLAN_TABLE_TCAM_t;

#define SMON_SET_SEARCH_OFFSET                                                       ((jl_uint32)0x00002AECU)
#define SMON_SET_SEARCH_NUM                                                          ((jl_uint32)0x00000002U)
typedef union SMON_SET_SEARCH_u {
    struct {
        jl_uint32 src_port:4;                                               //[ 3: 0]
        jl_uint32 vid:12;                                                   //[15: 4]
    } bf;
    jl_uint32 val[1];
} SMON_SET_SEARCH_t;

#define LLDP_CONFIGURATION_OFFSET                                                    ((jl_uint32)0x00002AEEU)
#define LLDP_CONFIGURATION_NUM                                                       ((jl_uint32)0x00000001U)
typedef union LLDP_CONFIGURATION_u {
    struct {
        jl_uint64 mac1:48;                                                  //[47: 0]
        jl_uint64 mac2:48;                                                  //[95:48]
        jl_uint64 mac3:48;                                                 //[143:96]
        jl_uint64 eth:16;                                                 //[159:144]
        jl_uint64 portmask:10;                                            //[169:160]
    } bf;
    jl_uint32 val[8];
} LLDP_CONFIGURATION_t;

#define INGRESS_L2_ACL_MATCH_DATA_ENTRIES_OFFSET                                     ((jl_uint32)0x00002AF6U)
#define INGRESS_L2_ACL_MATCH_DATA_ENTRIES_NUM                                        ((jl_uint32)0x00000020U)
typedef union INGRESS_L2_ACL_MATCH_DATA_ENTRIES_u {
    struct {
        jl_uint64 compare_eth_type:1;                                       //[ 0: 0]
        jl_uint64 type_of_comparison_eth_type:1;                            //[ 1: 1]
        jl_uint64 eth_type:16;                                              //[17: 2]
        jl_uint64 compare_da_mac:1;                                         //[18:18]
        jl_uint64 type_of_comparison_da_mac:1;                              //[19:19]
        jl_uint64 da_mac:48;                                                //[67:20]
        jl_uint64 compare_sa_mac:1;                                         //[68:68]
        jl_uint64 type_of_comparison_sa_mac:1;                              //[69:69]
        jl_uint64 sa_mac:48;                                               //[117:70]
        jl_uint64 compare_vid:1;                                          //[118:118]
        jl_uint64 type_of_comparison_vid:1;                               //[119:119]
        jl_uint64 vid:12;                                                 //[131:120]
        jl_uint64 compare_pcp:1;                                          //[132:132]
        jl_uint64 type_of_comparison_pcp:1;                               //[133:133]
        jl_uint64 pcp:3;                                                  //[136:134]
        jl_uint64 compare_dei:1;                                          //[137:137]
        jl_uint64 type_of_comparison_dei:1;                               //[138:138]
        jl_uint64 dei:1;                                                  //[139:139]
        jl_uint64 compare_has_vlans:1;                                    //[140:140]
        jl_uint64 type_of_comparison_has_vlans:1;                         //[141:141]
        jl_uint64 has_vlans:1;                                            //[142:142]
        jl_uint64 compare_cstag:1;                                        //[143:143]
        jl_uint64 type_of_comparison_cstag:1;                             //[144:144]
        jl_uint64 cstag:1;                                                //[145:145]
        jl_uint64 ports:10;                                               //[155:146]
    } bf;
    jl_uint32 val[8];
} INGRESS_L2_ACL_MATCH_DATA_ENTRIES_t;

#define SMON_SET_0_PACKET_COUNTER_OFFSET                                             ((jl_uint32)0x00002BF6U)
#define SMON_SET_0_PACKET_COUNTER_NUM                                                ((jl_uint32)0x00000008U)
typedef union SMON_SET_0_PACKET_COUNTER_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} SMON_SET_0_PACKET_COUNTER_t;

#define SMON_SET_1_PACKET_COUNTER_OFFSET                                             ((jl_uint32)0x00002BFEU)
#define SMON_SET_1_PACKET_COUNTER_NUM                                                ((jl_uint32)0x00000008U)
typedef union SMON_SET_1_PACKET_COUNTER_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} SMON_SET_1_PACKET_COUNTER_t;

#define SMON_SET_0_BYTE_COUNTER_OFFSET                                               ((jl_uint32)0x00002C06U)
#define SMON_SET_0_BYTE_COUNTER_NUM                                                  ((jl_uint32)0x00000008U)
typedef union SMON_SET_0_BYTE_COUNTER_u {
    struct {
        jl_uint32 bytes:24;                                                 //[23: 0]
    } bf;
    jl_uint32 val[1];
} SMON_SET_0_BYTE_COUNTER_t;

#define SMON_SET_1_BYTE_COUNTER_OFFSET                                               ((jl_uint32)0x00002C0EU)
#define SMON_SET_1_BYTE_COUNTER_NUM                                                  ((jl_uint32)0x00000008U)
typedef union SMON_SET_1_BYTE_COUNTER_u {
    struct {
        jl_uint32 bytes:24;                                                 //[23: 0]
    } bf;
    jl_uint32 val[1];
} SMON_SET_1_BYTE_COUNTER_t;

#define INGRESS_L2_ACL_MATCH_COUNTER_OFFSET                                          ((jl_uint32)0x00002C16U)
#define INGRESS_L2_ACL_MATCH_COUNTER_NUM                                             ((jl_uint32)0x00000020U)
typedef union INGRESS_L2_ACL_MATCH_COUNTER_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} INGRESS_L2_ACL_MATCH_COUNTER_t;

#define QUEUE_OFF_DROP_OFFSET                                                        ((jl_uint32)0x00002C36U)
#define QUEUE_OFF_DROP_NUM                                                           ((jl_uint32)0x0000000AU)
typedef union QUEUE_OFF_DROP_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} QUEUE_OFF_DROP_t;

#define EGRESS_SPANNING_TREE_DROP_OFFSET                                             ((jl_uint32)0x00002C40U)
#define EGRESS_SPANNING_TREE_DROP_NUM                                                ((jl_uint32)0x0000000AU)
typedef union EGRESS_SPANNING_TREE_DROP_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} EGRESS_SPANNING_TREE_DROP_t;

#define MBSC_DROP_OFFSET                                                             ((jl_uint32)0x00002C4AU)
#define MBSC_DROP_NUM                                                                ((jl_uint32)0x0000000AU)
typedef union MBSC_DROP_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} MBSC_DROP_t;

#define EGRESS_RESOURCE_MANAGEMENT_MARGIN_OFFSET                                     ((jl_uint32)0x00002C54U)
#define EGRESS_RESOURCE_MANAGEMENT_MARGIN_NUM                                        ((jl_uint32)0x00000001U)
typedef union EGRESS_RESOURCE_MANAGEMENT_MARGIN_u {
    struct {
        jl_uint32 global_margin:10;                                         //[ 9: 0]
        jl_uint32 ffa_margin:10;                                            //[19:10]
    } bf;
    jl_uint32 val[1];
} EGRESS_RESOURCE_MANAGEMENT_MARGIN_t;

#define EGRESS_RESOURCE_MANAGEMENT_MODE_OFFSET                                       ((jl_uint32)0x00002C55U)
#define EGRESS_RESOURCE_MANAGEMENT_MODE_NUM                                          ((jl_uint32)0x0000000BU)
typedef union EGRESS_RESOURCE_MANAGEMENT_MODE_u {
    struct {
        jl_uint32 mode:1;                                                   //[ 0: 0]
        jl_uint32 eql_ptr:2;                                                //[ 2: 1]
        jl_uint32 eqg_ptr:2;                                                //[ 4: 3]
    } bf;
    jl_uint32 val[1];
} EGRESS_RESOURCE_MANAGEMENT_MODE_t;

#define EGRESS_QUEUE_GUARANTEE_SET_OFFSET                                            ((jl_uint32)0x00002C60U)
#define EGRESS_QUEUE_GUARANTEE_SET_NUM                                               ((jl_uint32)0x00000004U)
typedef union EGRESS_QUEUE_GUARANTEE_SET_u {
    struct {
        jl_uint32 guarantee:10;                                             //[ 9: 0]
    } bf;
    jl_uint32 val[1];
} EGRESS_QUEUE_GUARANTEE_SET_t;

#define RESOURCE_LIMITER_SET_0_OFFSET                                                ((jl_uint32)0x00002C64U)
#define RESOURCE_LIMITER_SET_0_NUM                                                   ((jl_uint32)0x00000004U)
typedef union RESOURCE_LIMITER_SET_0_u {
    struct {
        jl_uint32 xon:10;                                                   //[ 9: 0]
        jl_uint32 threshold:10;                                             //[19:10]
    } bf;
    jl_uint32 val[1];
} RESOURCE_LIMITER_SET_0_t;

#define RESOURCE_LIMITER_SET_1_OFFSET                                                ((jl_uint32)0x00002C68U)
#define RESOURCE_LIMITER_SET_1_NUM                                                   ((jl_uint32)0x00000004U)
typedef union RESOURCE_LIMITER_SET_1_u {
    struct {
        jl_uint32 xon:10;                                                   //[ 9: 0]
        jl_uint32 threshold:10;                                             //[19:10]
    } bf;
    jl_uint32 val[1];
} RESOURCE_LIMITER_SET_1_t;

#define RESOURCE_LIMITER_SET_2_OFFSET                                                ((jl_uint32)0x00002C6CU)
#define RESOURCE_LIMITER_SET_2_NUM                                                   ((jl_uint32)0x00000004U)
typedef union RESOURCE_LIMITER_SET_2_u {
    struct {
        jl_uint32 xon:10;                                                   //[ 9: 0]
        jl_uint32 threshold:10;                                             //[19:10]
    } bf;
    jl_uint32 val[1];
} RESOURCE_LIMITER_SET_2_t;

#define RESOURCE_LIMITER_SET_3_OFFSET                                                ((jl_uint32)0x00002C70U)
#define RESOURCE_LIMITER_SET_3_NUM                                                   ((jl_uint32)0x00000004U)
typedef union RESOURCE_LIMITER_SET_3_u {
    struct {
        jl_uint32 xon:10;                                                   //[ 9: 0]
        jl_uint32 threshold:10;                                             //[19:10]
    } bf;
    jl_uint32 val[1];
} RESOURCE_LIMITER_SET_3_t;

#define EGRESS_RESOURCE_MANAGEMENT_DROP_OFFSET                                       ((jl_uint32)0x00002C74U)
#define EGRESS_RESOURCE_MANAGEMENT_DROP_NUM                                          ((jl_uint32)0x0000000AU)
typedef union EGRESS_RESOURCE_MANAGEMENT_DROP_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} EGRESS_RESOURCE_MANAGEMENT_DROP_t;

#define PACKET_BUFFER_STATUS_OFFSET                                                  ((jl_uint32)0x00002C7EU)
#define PACKET_BUFFER_STATUS_NUM                                                     ((jl_uint32)0x00000001U)
typedef union PACKET_BUFFER_STATUS_u {
    struct {
        jl_uint32 empty:10;                                                 //[ 9: 0]
    } bf;
    jl_uint32 val[1];
} PACKET_BUFFER_STATUS_t;

#define BUFFER_OVERFLOW_DROP_OFFSET                                                  ((jl_uint32)0x00002C7FU)
#define BUFFER_OVERFLOW_DROP_NUM                                                     ((jl_uint32)0x00000001U)
typedef union BUFFER_OVERFLOW_DROP_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} BUFFER_OVERFLOW_DROP_t;

#define INGRESS_RESOURCE_MANAGER_DROP_OFFSET                                         ((jl_uint32)0x00002C80U)
#define INGRESS_RESOURCE_MANAGER_DROP_NUM                                            ((jl_uint32)0x00000001U)
typedef union INGRESS_RESOURCE_MANAGER_DROP_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} INGRESS_RESOURCE_MANAGER_DROP_t;

#define MAP_QUEUE_TO_PRIORITY_OFFSET                                                 ((jl_uint32)0x00002C81U)
#define MAP_QUEUE_TO_PRIORITY_NUM                                                    ((jl_uint32)0x0000000AU)
typedef union MAP_QUEUE_TO_PRIORITY_u {
    struct {
        jl_uint32 prio0:2;                                                  //[ 1: 0]
        jl_uint32 prio1:2;                                                  //[ 3: 2]
        jl_uint32 prio2:2;                                                  //[ 5: 4]
        jl_uint32 prio3:2;                                                  //[ 7: 6]
    } bf;
    jl_uint32 val[1];
} MAP_QUEUE_TO_PRIORITY_t;

#define RE_QUEUE_OVERFLOW_DROP_OFFSET                                                ((jl_uint32)0x00002C8BU)
#define RE_QUEUE_OVERFLOW_DROP_NUM                                                   ((jl_uint32)0x00000001U)
typedef union RE_QUEUE_OVERFLOW_DROP_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} RE_QUEUE_OVERFLOW_DROP_t;

#define PORT_RESERVED_OFFSET                                                         ((jl_uint32)0x00002C8CU)
#define PORT_RESERVED_NUM                                                            ((jl_uint32)0x0000000AU)
typedef union PORT_RESERVED_u {
    struct {
        jl_uint32 cells:10;                                                 //[ 9: 0]
    } bf;
    jl_uint32 val[1];
} PORT_RESERVED_t;

#define PORT_USED_OFFSET                                                             ((jl_uint32)0x00002C96U)
#define PORT_USED_NUM                                                                ((jl_uint32)0x0000000AU)
typedef union PORT_USED_u {
    struct {
        jl_uint32 cells:10;                                                 //[ 9: 0]
    } bf;
    jl_uint32 val[1];
} PORT_USED_t;

#define FFA_USED_OFFSET                                                              ((jl_uint32)0x00002CA0U)
#define FFA_USED_NUM                                                                 ((jl_uint32)0x00000001U)
typedef union FFA_USED_u {
    struct {
        jl_uint32 cells:10;                                                 //[ 9: 0]
    } bf;
    jl_uint32 val[1];
} FFA_USED_t;

#define PORT_PAUSE_SETTINGS_OFFSET                                                   ((jl_uint32)0x00002CA1U)
#define PORT_PAUSE_SETTINGS_NUM                                                      ((jl_uint32)0x0000000AU)
typedef union PORT_PAUSE_SETTINGS_u {
    struct {
        jl_uint32 enable:1;                                                 //[ 0: 0]
        jl_uint32 force:1;                                                  //[ 1: 1]
        jl_uint32 pattern:1;                                                //[ 2: 2]
    } bf;
    jl_uint32 val[1];
} PORT_PAUSE_SETTINGS_t;

#define PORT_TAIL_DROP_SETTINGS_OFFSET                                               ((jl_uint32)0x00002CABU)
#define PORT_TAIL_DROP_SETTINGS_NUM                                                  ((jl_uint32)0x0000000AU)
typedef union PORT_TAIL_DROP_SETTINGS_u {
    struct {
        jl_uint32 enable:1;                                                 //[ 0: 0]
    } bf;
    jl_uint32 val[1];
} PORT_TAIL_DROP_SETTINGS_t;

#define XON_FFA_THRESHOLD_OFFSET                                                     ((jl_uint32)0x00002CB5U)
#define XON_FFA_THRESHOLD_NUM                                                        ((jl_uint32)0x00000001U)
typedef union XON_FFA_THRESHOLD_u {
    struct {
        jl_uint32 cells:10;                                                 //[ 9: 0]
    } bf;
    jl_uint32 val[1];
} XON_FFA_THRESHOLD_t;

#define XOFF_FFA_THRESHOLD_OFFSET                                                    ((jl_uint32)0x00002CB6U)
#define XOFF_FFA_THRESHOLD_NUM                                                       ((jl_uint32)0x00000001U)
typedef union XOFF_FFA_THRESHOLD_u {
    struct {
        jl_uint32 cells:10;                                                 //[ 9: 0]
        jl_uint32 enable:1;                                                 //[10:10]
        jl_uint32 trip:1;                                                   //[11:11]
    } bf;
    jl_uint32 val[1];
} XOFF_FFA_THRESHOLD_t;

#define TAIL_DROP_FFA_THRESHOLD_OFFSET                                               ((jl_uint32)0x00002CB7U)
#define TAIL_DROP_FFA_THRESHOLD_NUM                                                  ((jl_uint32)0x00000001U)
typedef union TAIL_DROP_FFA_THRESHOLD_u {
    struct {
        jl_uint32 cells:10;                                                 //[ 9: 0]
        jl_uint32 enable:1;                                                 //[10:10]
        jl_uint32 trip:1;                                                   //[11:11]
    } bf;
    jl_uint32 val[1];
} TAIL_DROP_FFA_THRESHOLD_t;

#define PORT_XON_FFA_THRESHOLD_OFFSET                                                ((jl_uint32)0x00002CB8U)
#define PORT_XON_FFA_THRESHOLD_NUM                                                   ((jl_uint32)0x0000000AU)
typedef union PORT_XON_FFA_THRESHOLD_u {
    struct {
        jl_uint32 cells:10;                                                 //[ 9: 0]
    } bf;
    jl_uint32 val[1];
} PORT_XON_FFA_THRESHOLD_t;

#define PORT_XOFF_FFA_THRESHOLD_OFFSET                                               ((jl_uint32)0x00002CC2U)
#define PORT_XOFF_FFA_THRESHOLD_NUM                                                  ((jl_uint32)0x0000000AU)
typedef union PORT_XOFF_FFA_THRESHOLD_u {
    struct {
        jl_uint32 cells:10;                                                 //[ 9: 0]
        jl_uint32 enable:1;                                                 //[10:10]
        jl_uint32 trip:1;                                                   //[11:11]
    } bf;
    jl_uint32 val[1];
} PORT_XOFF_FFA_THRESHOLD_t;

#define PORT_TAIL_DROP_FFA_THRESHOLD_OFFSET                                          ((jl_uint32)0x00002CCCU)
#define PORT_TAIL_DROP_FFA_THRESHOLD_NUM                                             ((jl_uint32)0x0000000AU)
typedef union PORT_TAIL_DROP_FFA_THRESHOLD_u {
    struct {
        jl_uint32 cells:10;                                                 //[ 9: 0]
        jl_uint32 enable:1;                                                 //[10:10]
        jl_uint32 trip:1;                                                   //[11:11]
    } bf;
    jl_uint32 val[1];
} PORT_TAIL_DROP_FFA_THRESHOLD_t;

#define EGRESS_PORT_DEPTH_OFFSET                                                     ((jl_uint32)0x00002CD6U)
#define EGRESS_PORT_DEPTH_NUM                                                        ((jl_uint32)0x0000000AU)
typedef union EGRESS_PORT_DEPTH_u {
    struct {
        jl_uint32 packets:10;                                               //[ 9: 0]
    } bf;
    jl_uint32 val[1];
} EGRESS_PORT_DEPTH_t;

#define EGRESS_QUEUE_DEPTH_OFFSET                                                    ((jl_uint32)0x00002CE0U)
#define EGRESS_QUEUE_DEPTH_NUM                                                       ((jl_uint32)0x00000028U)
typedef union EGRESS_QUEUE_DEPTH_u {
    struct {
        jl_uint32 packets:10;                                               //[ 9: 0]
    } bf;
    jl_uint32 val[1];
} EGRESS_QUEUE_DEPTH_t;

#define MINIMUM_BUFFER_FREE_OFFSET                                                   ((jl_uint32)0x00002D08U)
#define MINIMUM_BUFFER_FREE_NUM                                                      ((jl_uint32)0x00000001U)
typedef union MINIMUM_BUFFER_FREE_u {
    struct {
        jl_uint32 cells:10;                                                 //[ 9: 0]
    } bf;
    jl_uint32 val[1];
} MINIMUM_BUFFER_FREE_t;

#define OUTPUT_DISABLE_OFFSET                                                        ((jl_uint32)0x00002D09U)
#define OUTPUT_DISABLE_NUM                                                           ((jl_uint32)0x0000000AU)
typedef union OUTPUT_DISABLE_u {
    struct {
        jl_uint32 egress_queue0_disabled:1;                                 //[ 0: 0]
        jl_uint32 egress_queue1_disabled:1;                                 //[ 1: 1]
        jl_uint32 egress_queue2_disabled:1;                                 //[ 2: 2]
        jl_uint32 egress_queue3_disabled:1;                                 //[ 3: 3]
    } bf;
    jl_uint32 val[1];
} OUTPUT_DISABLE_t;

#define DWRR_BUCKET_CAPACITY_CONFIGURATION_OFFSET                                    ((jl_uint32)0x00002D13U)
#define DWRR_BUCKET_CAPACITY_CONFIGURATION_NUM                                       ((jl_uint32)0x0000000AU)
typedef union DWRR_BUCKET_CAPACITY_CONFIGURATION_u {
    struct {
        jl_uint32 bucket_capacity:18;                                       //[17: 0]
    } bf;
    jl_uint32 val[1];
} DWRR_BUCKET_CAPACITY_CONFIGURATION_t;

#define DWRR_BUCKET_MISC_CONFIGURATION_OFFSET                                        ((jl_uint32)0x00002D1DU)
#define DWRR_BUCKET_MISC_CONFIGURATION_NUM                                           ((jl_uint32)0x0000000AU)
typedef union DWRR_BUCKET_MISC_CONFIGURATION_u {
    struct {
        jl_uint32 threshold:5;                                              //[ 4: 0]
        jl_uint32 packets_not_bytes:1;                                      //[ 5: 5]
        jl_uint32 ifg_correction:8;                                         //[13: 6]
    } bf;
    jl_uint32 val[1];
} DWRR_BUCKET_MISC_CONFIGURATION_t;

#define DWRR_WEIGHT_CONFIGURATION_OFFSET                                             ((jl_uint32)0x00002D27U)
#define DWRR_WEIGHT_CONFIGURATION_NUM                                                ((jl_uint32)0x00000028U)
typedef union DWRR_WEIGHT_CONFIGURATION_u {
    struct {
        jl_uint32 weight:8;                                                 //[ 7: 0]
    } bf;
    jl_uint32 val[1];
} DWRR_WEIGHT_CONFIGURATION_t;

#define PB_PACKET_HEAD_COUNTER_OFFSET                                                ((jl_uint32)0x00002D4FU)
#define PB_PACKET_HEAD_COUNTER_NUM                                                   ((jl_uint32)0x00000001U)
typedef union PB_PACKET_HEAD_COUNTER_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} PB_PACKET_HEAD_COUNTER_t;

#define PB_PACKET_TAIL_COUNTER_OFFSET                                                ((jl_uint32)0x00002D50U)
#define PB_PACKET_TAIL_COUNTER_NUM                                                   ((jl_uint32)0x00000001U)
typedef union PB_PACKET_TAIL_COUNTER_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} PB_PACKET_TAIL_COUNTER_t;

#define DRAIN_PORT_OFFSET                                                            ((jl_uint32)0x00002D51U)
#define DRAIN_PORT_NUM                                                               ((jl_uint32)0x00000001U)
typedef union DRAIN_PORT_u {
    struct {
        jl_uint32 drain_mask:10;                                            //[ 9: 0]
    } bf;
    jl_uint32 val[1];
} DRAIN_PORT_t;

#define DRAIN_PORT_DROP_OFFSET                                                       ((jl_uint32)0x00002D52U)
#define DRAIN_PORT_DROP_NUM                                                          ((jl_uint32)0x0000000AU)
typedef union DRAIN_PORT_DROP_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} DRAIN_PORT_DROP_t;

#define UNKNOWN_EGRESS_DROP_OFFSET                                                   ((jl_uint32)0x00002D5CU)
#define UNKNOWN_EGRESS_DROP_NUM                                                      ((jl_uint32)0x0000000AU)
typedef union UNKNOWN_EGRESS_DROP_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} UNKNOWN_EGRESS_DROP_t;

#define EGRESS_PORT_DISABLED_DROP_OFFSET                                             ((jl_uint32)0x00002D66U)
#define EGRESS_PORT_DISABLED_DROP_NUM                                                ((jl_uint32)0x0000000AU)
typedef union EGRESS_PORT_DISABLED_DROP_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} EGRESS_PORT_DISABLED_DROP_t;

#define EPP_PM_DROP_OFFSET                                                           ((jl_uint32)0x00002D70U)
#define EPP_PM_DROP_NUM                                                              ((jl_uint32)0x00000001U)
typedef union EPP_PM_DROP_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} EPP_PM_DROP_t;

#define EPP_PACKET_HEAD_COUNTER_OFFSET                                               ((jl_uint32)0x00002D71U)
#define EPP_PACKET_HEAD_COUNTER_NUM                                                  ((jl_uint32)0x00000001U)
typedef union EPP_PACKET_HEAD_COUNTER_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} EPP_PACKET_HEAD_COUNTER_t;

#define EPP_PACKET_TAIL_COUNTER_OFFSET                                               ((jl_uint32)0x00002D72U)
#define EPP_PACKET_TAIL_COUNTER_NUM                                                  ((jl_uint32)0x00000001U)
typedef union EPP_PACKET_TAIL_COUNTER_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} EPP_PACKET_TAIL_COUNTER_t;

#define EGRESS_PORT_CONFIGURATION_OFFSET                                             ((jl_uint32)0x00002D73U)
#define EGRESS_PORT_CONFIGURATION_NUM                                                ((jl_uint32)0x0000000AU)
typedef union EGRESS_PORT_CONFIGURATION_u {
    struct {
        jl_uint32 vlan_single_op:3;                                         //[ 2: 0]
        jl_uint32 type_sel:2;                                               //[ 4: 3]
        jl_uint32 vid_sel:2;                                                //[ 6: 5]
        jl_uint32 cfi_dei_sel:2;                                            //[ 8: 7]
        jl_uint32 pcp_sel:2;                                                //[10: 9]
        jl_uint32 vid:12;                                                   //[22:11]
        jl_uint32 cfi_dei:1;                                                //[23:23]
        jl_uint32 pcp:3;                                                    //[26:24]
        jl_uint32 disabled:1;                                               //[27:27]
    } bf;
    jl_uint32 val[1];
} EGRESS_PORT_CONFIGURATION_t;

#define EGRESS_QUEUE_TO_PCP_AND_CFI_DEI_MAPPING_TABLE_OFFSET                         ((jl_uint32)0x00002D7DU)
#define EGRESS_QUEUE_TO_PCP_AND_CFI_DEI_MAPPING_TABLE_NUM                            ((jl_uint32)0x00000004U)
typedef union EGRESS_QUEUE_TO_PCP_AND_CFI_DEI_MAPPING_TABLE_u {
    struct {
        jl_uint32 cfi_dei:1;                                                //[ 0: 0]
        jl_uint32 pcp:3;                                                    //[ 3: 1]
    } bf;
    jl_uint32 val[1];
} EGRESS_QUEUE_TO_PCP_AND_CFI_DEI_MAPPING_TABLE_t;

#define OUTPUT_MIRRORING_TABLE_OFFSET                                                ((jl_uint32)0x00002D81U)
#define OUTPUT_MIRRORING_TABLE_NUM                                                   ((jl_uint32)0x0000000AU)
typedef union OUTPUT_MIRRORING_TABLE_u {
    struct {
        jl_uint32 output_mirror_enabled:1;                                  //[ 0: 0]
        jl_uint32 output_mirror_port:4;                                     //[ 4: 1]
    } bf;
    jl_uint32 val[1];
} OUTPUT_MIRRORING_TABLE_t;

#define EGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_OFFSET                                     ((jl_uint32)0x00002D8BU)
#define EGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_NUM                                        ((jl_uint32)0x00000001U)
typedef union EGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_u {
    struct {
        jl_uint32 type_value:16;                                            //[15: 0]
    } bf;
    jl_uint32 val[1];
} EGRESS_ETHERNET_TYPE_FOR_VLAN_TAG_t;

#define DISABLE_CPU_TAG_ON_CPU_PORT_OFFSET                                           ((jl_uint32)0x00002D8CU)
#define DISABLE_CPU_TAG_ON_CPU_PORT_NUM                                              ((jl_uint32)0x00000001U)
typedef union DISABLE_CPU_TAG_ON_CPU_PORT_u {
    struct {
        jl_uint32 disable:1;                                                //[ 0: 0]
    } bf;
    jl_uint32 val[1];
} DISABLE_CPU_TAG_ON_CPU_PORT_t;

#define PS_ERROR_COUNTER_OFFSET                                                      ((jl_uint32)0x00002D8DU)
#define PS_ERROR_COUNTER_NUM                                                         ((jl_uint32)0x0000000AU)
typedef union PS_ERROR_COUNTER_u {
    struct {
        jl_uint64 underrun:24;                                              //[23: 0]
        jl_uint64 overflow:24;                                              //[47:24]
    } bf;
    jl_uint32 val[2];
} PS_ERROR_COUNTER_t;

#define PS_PACKET_HEAD_COUNTER_OFFSET                                                ((jl_uint32)0x00002DA1U)
#define PS_PACKET_HEAD_COUNTER_NUM                                                   ((jl_uint32)0x00000001U)
typedef union PS_PACKET_HEAD_COUNTER_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} PS_PACKET_HEAD_COUNTER_t;

#define PS_PACKET_TAIL_COUNTER_OFFSET                                                ((jl_uint32)0x00002DA2U)
#define PS_PACKET_TAIL_COUNTER_NUM                                                   ((jl_uint32)0x00000001U)
typedef union PS_PACKET_TAIL_COUNTER_u {
    struct {
        jl_uint32 packets:24;                                               //[23: 0]
    } bf;
    jl_uint32 val[1];
} PS_PACKET_TAIL_COUNTER_t;

#endif /* __JL_REG_SWCORE_H__ */

