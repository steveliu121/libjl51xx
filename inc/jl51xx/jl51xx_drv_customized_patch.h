#ifndef __JL51XX_DRV_CUSTOMIZED_PATCH_H__
#define __JL51XX_DRV_CUSTOMIZED_PATCH_H__
#include <stdlib.h>

#include "jl_types.h"
#include "jl_config.h"

#ifdef CONFIG_JL_LOAD_CUSTOMIZED_PATCH
/* Autogenerated file, do not modify */

enum jl_cmd_e {
	JL_CMD_NONE = 0,
	JL_CMD_WRITE,
	JL_CMD_BWRITE,
	JL_CMD_DELAY
};

enum jl_cmd_flag_e {
	JL_CMD_FLAG_DA = 0,
	JL_CMD_FLAG_IDA,
	/* burst write size in word */
};

struct jl_cmd_line_s {
	jl_uint8 cmd; //cmd=1, write;cmd=2, burst write;cmd=3, dealy
	jl_uint8 flag; //flag=0, DAï¼›flag=1, IDA;if cmd==2,flag=burst size
	jl_uint32 addr; //regiter SMI access address
	jl_uint32 val; //register value;dealy time ms
} __attribute__ ((__packed__));


struct jl_cmd_line_s g_cmd_line_set_customize[] = {



};

struct jl_cmd_line_desc_s {
	struct jl_cmd_line_s *p_line_set;
	jl_uint32 lines;
};

struct jl_cmd_line_desc_s g_cmd_line_desc = {
	.p_line_set = g_cmd_line_set_customize,
	.lines = JL_ARRAY_SIZE(g_cmd_line_set_customize)
};

#endif /* CONFIG_JL_LOAD_CUSTOMIZED_PATCH */
#endif /* __JL51XX_DRV_CUSTOMIZED_PATCH_H__ */
