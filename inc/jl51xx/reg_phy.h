//reg_phy.h
/*
* Automatically generated by gen_c_api.py, don't edit it
*/
#ifndef __JL_REG_PHY_H__
#define __JL_REG_PHY_H__

#include <jl_types.h>
#include "jl51xx/jl51xx_drv_switch.h"

#define PHY7_BASE                                                                    ((jl_uint32)0x00E00000U)
#define PHY7_BLOCK_SIZE                                                              ((jl_uint32)0x00200000U)
#define PHY6_BASE                                                                    ((jl_uint32)0x00C00000U)
#define PHY6_BLOCK_SIZE                                                              ((jl_uint32)0x00200000U)
#define PHY5_BASE                                                                    ((jl_uint32)0x00A00000U)
#define PHY5_BLOCK_SIZE                                                              ((jl_uint32)0x00200000U)
#define PHY4_BASE                                                                    ((jl_uint32)0x00800000U)
#define PHY4_BLOCK_SIZE                                                              ((jl_uint32)0x00200000U)
#define PHY3_BASE                                                                    ((jl_uint32)0x00600000U)
#define PHY3_BLOCK_SIZE                                                              ((jl_uint32)0x00200000U)
#define PHY2_BASE                                                                    ((jl_uint32)0x00400000U)
#define PHY2_BLOCK_SIZE                                                              ((jl_uint32)0x00200000U)
#define PHY1_BASE                                                                    ((jl_uint32)0x00200000U)
#define PHY1_BLOCK_SIZE                                                              ((jl_uint32)0x00200000U)
#define PHY0_BASE                                                                    ((jl_uint32)0x00000000U + JL_RF_BASE)
#define PHY0_BLOCK_SIZE                                                              ((jl_uint32)0x00200000U)

#define BMCR_OFFSET                                                                  ((jl_uint32)0x00000000U)
#define BMCR_NUM                                                                     ((jl_uint32)0x00000001U)
/* Basic Mode Control Register */
typedef union BMCR_u {
    struct {
		jl_uint32 rsvd:6;
		jl_uint32 speed_sel1:1;
		jl_uint32 collision_test:1;
		jl_uint32 duplex_mode:1;
		jl_uint32 restart_autoneg:1;
		jl_uint32 isolate:1;
		jl_uint32 power_down:1;
		jl_uint32 autoneg_enable:1;
		jl_uint32 speed_sel0:1;
		jl_uint32 loopback:1;
		jl_uint32 reset:1;
    } bf;
    jl_uint32 val[1];
} BMCR_t;

#define BMSR_OFFSET                                                                  ((jl_uint32)0x00000001U)
#define BMSR_NUM                                                                     ((jl_uint32)0x00000001U)
/* Basic Mode Status Register, RO */
typedef union BMSR_u {
    struct {
		jl_uint32 ext_cap:1;
		jl_uint32 jabber:1;
		jl_uint32 link_status:1;
		jl_uint32 autoneg:1; //0x1
		jl_uint32 remote_fault:1;
		jl_uint32 autoneg_complete:1;
		jl_uint32 mdio_mfps:1;
		jl_uint32 :4;
		jl_uint32 base_10_t:1;
		jl_uint32 base_10_t_fd:1;
		jl_uint32 base_100_tx:1;
		jl_uint32 base_100_tx_fd:1;
		jl_uint32 base_100_t4:1;
    } bf;
    jl_uint32 val[1];
} BMSR_t;

#define PHYID1_OFFSET                                                                ((jl_uint32)0x00000002U)
#define PHYID1_NUM                                                                   ((jl_uint32)0x00000001U)
/* PHYID1 */
typedef union PHYID1_u {
    struct {
		jl_uint32 oui_msb:16;
    } bf;
    jl_uint32 val[1];
} PHYID1_t;

#define PHYID2_OFFSET                                                                ((jl_uint32)0x00000003U)
#define PHYID2_NUM                                                                   ((jl_uint32)0x00000001U)
/* PHYID2 */
typedef union PHYID2_u {
    struct {
		jl_uint32 revision_num:4;
		jl_uint32 model_num:6;
		jl_uint32 oui_lsb:6;
    } bf;
    jl_uint32 val[1];
} PHYID2_t;

#define ANAR_OFFSET                                                                  ((jl_uint32)0x00000004U)
#define ANAR_NUM                                                                     ((jl_uint32)0x00000001U)
/* Auto-Negotitation Advertisement Register */
typedef union ANAR_u {
    struct {
		jl_uint32 sel:5;
		jl_uint32 base_10_t:1;/*RW*/
		jl_uint32 base_10_t_fd:1;/*RW*/
		jl_uint32 base_100_tx:1;/*RW*/
		jl_uint32 base_100_tx_fd:1; /*RW*/
		jl_uint32 base_100_t4:1;
		jl_uint32 pause:1;
		jl_uint32 asym_pause:1;
		jl_uint32 rsvd:1;
		jl_uint32 remote_fault:1;
		jl_uint32 ack:1;
		jl_uint32 next_page:1; /*RW*/
    } bf;
    jl_uint32 val[1];
} ANAR_t;

#define ANLPAR_OFFSET                                                                ((jl_uint32)0x00000005U)
#define ANLPAR_NUM                                                                   ((jl_uint32)0x00000001U)
/* Auto-Negotiation Link Partner Ability Register, RO */
typedef union ANLPAR_u {
    struct {
		jl_uint32 sel:5;
		jl_uint32 base_10_t:1;
		jl_uint32 base_10_t_fd:1;
		jl_uint32 base_100_tx:1;
		jl_uint32 base_100_tx_fd:1;
		jl_uint32 base_100_t4:1;
		jl_uint32 pause:1;
		jl_uint32 asym_pause:1;
		jl_uint32 rsvd:1;
		jl_uint32 remote_fault:1;
		jl_uint32 ack:1;
		jl_uint32 next_page:1;
    } bf;
    jl_uint32 val[1];
} ANLPAR_t;

#define ANER_OFFSET                                                                  ((jl_uint32)0x00000006U)
#define ANER_NUM                                                                     ((jl_uint32)0x00000001U)
/* Auto-Negotiation Expansion Register, RO */
typedef union ANER_u {
    struct {
		jl_uint32 linkp_autoneg:1;
		jl_uint32 page_recv:1;
		jl_uint32 local_next_page:1;
		jl_uint32 linkp_next_page:1;
		jl_uint32 para_detect_fault:1;
		jl_uint32 rsvd:11;
    } bf;
    jl_uint32 val[1];
} ANER_t;

#define FMLR_OFFSET                                                                  ((jl_uint32)0x00000090U)
#define FMLR_NUM                                                                     ((jl_uint32)0x00000001U)
/* Fiber Mode and Loopback Register */
typedef union FMLR_u {
    struct {
		jl_uint32 :1;
		jl_uint32 mdi_mode:1; /*RW*/
		jl_uint32 auto_mdix_enable:1; /*RW*/
		jl_uint32 :2;
		jl_uint32 fiber_mode:1; /*RW*/
    } bf;
    jl_uint32 val[1];
} FMLR_t;

#define IISDR_OFFSET                                                                 ((jl_uint32)0x00000091U)
#define IISDR_NUM                                                                    ((jl_uint32)0x00000001U)
/* Interrupt Indicators and SNR Display Register, RO */
typedef union IISDR_u {
    struct {
		jl_uint32 signal_quality_ind:5;
		jl_uint32 link_status_change:1;
		jl_uint32 duplex_change:1;
		jl_uint32 speed_change:1;
		jl_uint32 auto_neg_err:1;
    } bf;
    jl_uint32 val[1];
} IISDR_t;

#define EEECER_OFFSET                                                                ((jl_uint32)0x00000092U)
#define EEECER_NUM                                                                   ((jl_uint32)0x00000001U)
/* EEE Capability Enable Register */
typedef union EEECER_u {
    struct {
		jl_uint32 :8;
		jl_uint32 rx_quiet_enable:1;
		jl_uint32 tx_quiet_enable:1;
		jl_uint32 :2;
		jl_uint32 eee_nway_enable:1;
    } bf;
    jl_uint32 val[1];
} EEECER_t;

#define EEECR_OFFSET                                                                 ((jl_uint32)0x00000093U)
#define EEECR_NUM                                                                    ((jl_uint32)0x00000001U)
/* EEE Capability Enable Register, RO */
typedef union EEECR_u {
    struct {
        jl_uint32 fe_eeecr:16;
    } bf;
    jl_uint32 val[1];
} EEECR_t;

#define IWELFR_OFFSET                                                                ((jl_uint32)0x00000094U)
#define IWELFR_NUM                                                                   ((jl_uint32)0x00000001U)
/* Interrupt WOL Enable and LEDs Function Register */
typedef union IWELFR_u {
    struct {
        jl_uint32 fe_iwelfr:16;
    } bf;
    jl_uint32 val[1];
} IWELFR_t;

#endif /* __JL_REG_PHY_H__ */

