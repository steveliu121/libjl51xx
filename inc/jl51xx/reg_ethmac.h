//reg_ethmac.h
/*
* Automatically generated by gen_c_api.py, don't edit it
*/
#ifndef __JL_REG_ETHMAC_H__
#define __JL_REG_ETHMAC_H__

#include <jl_types.h>
#include "jl51xx/jl51xx_drv_switch.h"

#define ETHMAC9_BASE                                                                 ((jl_uint32)0x00200900U)
#define ETHMAC9_BLOCK_SIZE                                                           ((jl_uint32)0x00000100U)
#define ETHMAC8_BASE                                                                 ((jl_uint32)0x00200800U)
#define ETHMAC8_BLOCK_SIZE                                                           ((jl_uint32)0x00000100U)
#define ETHMAC7_BASE                                                                 ((jl_uint32)0x00200700U)
#define ETHMAC7_BLOCK_SIZE                                                           ((jl_uint32)0x00000100U)
#define ETHMAC6_BASE                                                                 ((jl_uint32)0x00200600U)
#define ETHMAC6_BLOCK_SIZE                                                           ((jl_uint32)0x00000100U)
#define ETHMAC5_BASE                                                                 ((jl_uint32)0x00200500U)
#define ETHMAC5_BLOCK_SIZE                                                           ((jl_uint32)0x00000100U)
#define ETHMAC4_BASE                                                                 ((jl_uint32)0x00200400U)
#define ETHMAC4_BLOCK_SIZE                                                           ((jl_uint32)0x00000100U)
#define ETHMAC3_BASE                                                                 ((jl_uint32)0x00200300U)
#define ETHMAC3_BLOCK_SIZE                                                           ((jl_uint32)0x00000100U)
#define ETHMAC2_BASE                                                                 ((jl_uint32)0x00200200U)
#define ETHMAC2_BLOCK_SIZE                                                           ((jl_uint32)0x00000100U)
#define ETHMAC1_BASE                                                                 ((jl_uint32)0x00200100U)
#define ETHMAC1_BLOCK_SIZE                                                           ((jl_uint32)0x00000100U)
#define ETHMAC0_BASE                                                                 ((jl_uint32)0x00200000U)
#define ETHMAC0_BLOCK_SIZE                                                           ((jl_uint32)0x00000100U)

#define MAC_MODER_OFFSET                                                             ((jl_uint32)0x00000000U)
#define MAC_MODER_NUM                                                                ((jl_uint32)0x00000001U)
typedef union MAC_MODER_u {
    struct {
        jl_uint32 rx_en:1;                                                  //[ 0: 0]
        jl_uint32 tx_en:1;                                                  //[ 1: 1]
        jl_uint32 full_duplex:1;                                            //[ 2: 2]
        jl_uint32 loopback:1;                                               //[ 3: 3]
        jl_uint32 rx_ifg_chk_en:1;                                          //[ 4: 4]
        jl_uint32 rx_crc_chk_en:1;                                          //[ 5: 5]
        jl_uint32 rx_crc_strip_en:1;                                        //[ 6: 6]
        jl_uint32 rx_small_en:1;                                            //[ 7: 7]
        jl_uint32 rx_long_en:1;                                             //[ 8: 8]
        jl_uint32 rx_hug_en:1;                                              //[ 9: 9]
        jl_uint32 rx_bro_en:1;                                              //[10:10]
        jl_uint32 rsvd:1;                                                   //[11:11]
        jl_uint32 rx_pro_en:1;                                              //[12:12]
        jl_uint32 rx_fci_en:1;                                              //[13:13]
        jl_uint32 rsvd1:2;                                                   //[15:14]
        jl_uint32 tx_no_bckoff:1;                                           //[16:16]
        jl_uint32 tx_ex_dfr_en:1;                                           //[17:17]
        jl_uint32 tx_no_pre:1;                                              //[18:18]
        jl_uint32 tx_dly_crc_en:1;                                          //[19:19]
        jl_uint32 tx_crc_gen_en:1;                                          //[20:20]
        jl_uint32 tx_pad_en:1;                                              //[21:21]
        jl_uint32 tx_csl_en:1;                                              //[22:22]
        jl_uint32 tx_crs_ignore:1;                                          //[23:23]
        jl_uint32 tx_en_flush_en:1;                                         //[24:24]
    } bf;
    jl_uint32 val[1];
} MAC_MODER_t;

#define INT_STATUS_OFFSET                                                            ((jl_uint32)0x00000001U)
#define INT_STATUS_NUM                                                               ((jl_uint32)0x00000001U)
typedef union INT_STATUS_u {
    struct {
        jl_uint32 tx_overflow:1;                                            //[ 0: 0]
        jl_uint32 tx_underflow:1;                                           //[ 1: 1]
        jl_uint32 tx_abrt:1;                                                //[ 2: 2]
        jl_uint32 tx_err:1;                                                 //[ 3: 3]
        jl_uint32 rx_err:1;                                                 //[ 4: 4]
        jl_uint32 tx_ctrl_frame:1;                                          //[ 5: 5]
        jl_uint32 rx_ctrl_frame:1;                                          //[ 6: 6]
        jl_uint32 rx_overflow:1;                                            //[ 7: 7]
        jl_uint32 rx_ipg_drp:1;                                             //[ 8: 8]
        jl_uint32 link_down:1;                                              //[ 9: 9]
        jl_uint32 link_up:1;                                                //[10:10]
    } bf;
    jl_uint32 val[1];
} INT_STATUS_t;

#define INT_ENABLE_OFFSET                                                            ((jl_uint32)0x00000002U)
#define INT_ENABLE_NUM                                                               ((jl_uint32)0x00000001U)
typedef union INT_ENABLE_u {
    struct {
        jl_uint32 tx_overflow_en:1;                                         //[ 0: 0]
        jl_uint32 tx_underflow_en:1;                                        //[ 1: 1]
        jl_uint32 tx_abrt_en:1;                                             //[ 2: 2]
        jl_uint32 tx_err_en:1;                                              //[ 3: 3]
        jl_uint32 rx_err_en:1;                                              //[ 4: 4]
        jl_uint32 tx_ctrl_frame_en:1;                                       //[ 5: 5]
        jl_uint32 rx_ctrl_frame_en:1;                                       //[ 6: 6]
        jl_uint32 rx_overflow_en:1;                                         //[ 7: 7]
        jl_uint32 rx_ipg_drp_en:1;                                          //[ 8: 8]
        jl_uint32 link_down_en:1;                                           //[ 9: 9]
        jl_uint32 link_up_en:1;                                             //[10:10]
    } bf;
    jl_uint32 val[1];
} INT_ENABLE_t;

#define INT_SET_OFFSET                                                               ((jl_uint32)0x00000003U)
#define INT_SET_NUM                                                                  ((jl_uint32)0x00000001U)
typedef union INT_SET_u {
    struct {
        jl_uint32 tx_overflow_set:1;                                        //[ 0: 0]
        jl_uint32 tx_underflow_set:1;                                       //[ 1: 1]
        jl_uint32 tx_abrt_set:1;                                            //[ 2: 2]
        jl_uint32 tx_err_set:1;                                             //[ 3: 3]
        jl_uint32 rx_err_set:1;                                             //[ 4: 4]
        jl_uint32 tx_ctrl_frame_set:1;                                      //[ 5: 5]
        jl_uint32 rx_ctrl_frame_set:1;                                      //[ 6: 6]
        jl_uint32 rx_overflow_set:1;                                        //[ 7: 7]
        jl_uint32 rx_ipg_drp_set:1;                                         //[ 8: 8]
        jl_uint32 link_down_set:1;                                          //[ 9: 9]
        jl_uint32 link_up_set:1;                                            //[10:10]
    } bf;
    jl_uint32 val[1];
} INT_SET_t;

#define RX_ERR_INFO_OFFSET                                                           ((jl_uint32)0x00000004U)
#define RX_ERR_INFO_NUM                                                              ((jl_uint32)0x00000001U)
typedef union RX_ERR_INFO_u {
    struct {
        jl_uint32 rx_addr_violation:1;                                      //[ 0: 0]
        jl_uint32 rx_mii_err:1;                                             //[ 1: 1]
        jl_uint32 rx_pause_frame:1;                                         //[ 2: 2]
        jl_uint32 rx_short_pkt:1;                                           //[ 3: 3]
        jl_uint32 rx_invalid_symbol:1;                                      //[ 4: 4]
        jl_uint32 rx_dribble_nibble:1;                                      //[ 5: 5]
        jl_uint32 rx_jumbo_pkt:1;                                           //[ 6: 6]
        jl_uint32 rx_crc_err:1;                                             //[ 7: 7]
        jl_uint32 rx_late_collision:1;                                      //[ 8: 8]
    } bf;
    jl_uint32 val[1];
} RX_ERR_INFO_t;

#define TX_ERR_INFO_OFFSET                                                           ((jl_uint32)0x00000005U)
#define TX_ERR_INFO_NUM                                                              ((jl_uint32)0x00000001U)
typedef union TX_ERR_INFO_u {
    struct {
        jl_uint32 tx_csr_loss:1;                                            //[ 0: 0]
        jl_uint32 tx_app_err:1;                                             //[ 1: 1]
    } bf;
    jl_uint32 val[1];
} TX_ERR_INFO_t;

#define TX_ABORT_INFO_OFFSET                                                         ((jl_uint32)0x00000006U)
#define TX_ABORT_INFO_NUM                                                            ((jl_uint32)0x00000001U)
typedef union TX_ABORT_INFO_u {
    struct {
        jl_uint32 tx_exdefer:1;                                             //[ 0: 0]
        jl_uint32 tx_max_collision:1;                                       //[ 1: 1]
        jl_uint32 tx_late_collision:1;                                      //[ 2: 2]
    } bf;
    jl_uint32 val[1];
} TX_ABORT_INFO_t;

#define IPG_OFFSET                                                                   ((jl_uint32)0x00000007U)
#define IPG_NUM                                                                      ((jl_uint32)0x00000001U)
typedef union IPG_u {
    struct {
        jl_uint32 ipgt:7;                                                   //[ 6: 0]
        jl_uint32 rsvd:1;                                                   //[ 7: 7]
        jl_uint32 ipgr:5;                                                   //[12: 8]
    } bf;
    jl_uint32 val[1];
} IPG_t;

#define IPGR1_OFFSET                                                                 ((jl_uint32)0x00000008U)
#define IPGR1_NUM                                                                    ((jl_uint32)0x00000001U)
typedef union IPGR1_u {
    struct {
        jl_uint32 ipgr1:7;                                                  //[ 6: 0]
    } bf;
    jl_uint32 val[1];
} IPGR1_t;

#define IPGR2_OFFSET                                                                 ((jl_uint32)0x00000009U)
#define IPGR2_NUM                                                                    ((jl_uint32)0x00000001U)
typedef union IPGR2_u {
    struct {
        jl_uint32 ipgr2:7;                                                  //[ 6: 0]
    } bf;
    jl_uint32 val[1];
} IPGR2_t;

#define PACKET_LEN_OFFSET                                                            ((jl_uint32)0x0000000AU)
#define PACKET_LEN_NUM                                                               ((jl_uint32)0x00000001U)
typedef union PACKET_LEN_u {
    struct {
        jl_uint32 max_frame_length:16;                                      //[15: 0]
        jl_uint32 min_frame_length:16;                                      //[31:16]
    } bf;
    jl_uint32 val[1];
} PACKET_LEN_t;

#define HALF_DUPLEX_CFG_OFFSET                                                       ((jl_uint32)0x0000000BU)
#define HALF_DUPLEX_CFG_NUM                                                          ((jl_uint32)0x00000001U)
typedef union HALF_DUPLEX_CFG_u {
    struct {
        jl_uint32 coll_valid:6;                                             //[ 5: 0]
        jl_uint32 rsvd:2;                                                   //[ 7: 6]
        jl_uint32 max_retry:4;                                              //[11: 8]
        jl_uint32 max_defer:14;                                             //[25:12]
        jl_uint32 rsvd1:2;                                                   //[27:26]
        jl_uint32 tx_en_dly_mask:3;                                         //[30:28]
    } bf;
    jl_uint32 val[1];
} HALF_DUPLEX_CFG_t;

#define MAC_ADDR_OFFSET                                                              ((jl_uint32)0x0000000CU)
#define MAC_ADDR_NUM                                                                 ((jl_uint32)0x00000001U)
typedef union MAC_ADDR_u {
    struct {
        jl_uint64 mac_addr:48;                                              //[47: 0]
    } bf;
    jl_uint32 val[2];
} MAC_ADDR_t;

#define RMA_DROP_MASK_OFFSET                                                         ((jl_uint32)0x0000000EU)
#define RMA_DROP_MASK_NUM                                                            ((jl_uint32)0x00000001U)
typedef union RMA_DROP_MASK_u {
    struct {
        jl_uint64 rma_drp_mask:64;                                          //[63: 0]
    } bf;
    jl_uint32 val[2];
} RMA_DROP_MASK_t;

#define TX_FIFO_THRESHOLD_OFFSET                                                     ((jl_uint32)0x00000010U)
#define TX_FIFO_THRESHOLD_NUM                                                        ((jl_uint32)0x00000001U)
typedef union TX_FIFO_THRESHOLD_u {
    struct {
        jl_uint32 tx_fifo_thrd:6;                                           //[ 5: 0]
    } bf;
    jl_uint32 val[1];
} TX_FIFO_THRESHOLD_t;

#define CTRL_MODER_OFFSET                                                            ((jl_uint32)0x00000011U)
#define CTRL_MODER_NUM                                                               ((jl_uint32)0x00000001U)
typedef union CTRL_MODER_u {
    struct {
        jl_uint32 pass_all:1;                                               //[ 0: 0]
        jl_uint32 rx_flow:1;                                                //[ 1: 1]
        jl_uint32 tx_flow:1;                                                //[ 2: 2]
        jl_uint32 tx_bp:1;                                                  //[ 3: 3]
    } bf;
    jl_uint32 val[1];
} CTRL_MODER_t;

#define TXPAUSE_FRAME_CONTROL_OFFSET                                                 ((jl_uint32)0x00000012U)
#define TXPAUSE_FRAME_CONTROL_NUM                                                    ((jl_uint32)0x00000001U)
typedef union TXPAUSE_FRAME_CONTROL_u {
    struct {
        jl_uint32 tx_pause_tv:16;                                           //[15: 0]
        jl_uint32 tx_pause_rq:1;                                            //[16:16]
        jl_uint32 tx_pause_en:1;                                            //[17:17]
    } bf;
    jl_uint32 val[1];
} TXPAUSE_FRAME_CONTROL_t;

#define TXLOOP_FRAME_CONTROL_OFFSET                                                  ((jl_uint32)0x00000014U)
#define TXLOOP_FRAME_CONTROL_NUM                                                     ((jl_uint32)0x00000001U)
typedef union TXLOOP_FRAME_CONTROL_u {
    struct {
        jl_uint64 lp_frm_etype:16;                                          //[15: 0]
        jl_uint64 lp_frm_opcode:16;                                         //[31:16]
        jl_uint64 lp_frm_ttl:16;                                            //[47:32]
        jl_uint64 lp_frm_max_ttl:16;                                        //[63:48]
    } bf;
    jl_uint32 val[2];
} TXLOOP_FRAME_CONTROL_t;

#define STATISTIC_MODE_0_OFFSET                                                      ((jl_uint32)0x00000016U)
#define STATISTIC_MODE_0_NUM                                                         ((jl_uint32)0x00000001U)
typedef union STATISTIC_MODE_0_u {
    struct {
        jl_uint32 car_en:1;                                                 //[ 0: 0]
        jl_uint32 rsvd:3;                                                   //[ 3: 1]
        jl_uint32 mib_en:28;                                                //[31: 4]
    } bf;
    jl_uint32 val[1];
} STATISTIC_MODE_0_t;

#define STATISTIC_MODE_1_OFFSET                                                      ((jl_uint32)0x00000017U)
#define STATISTIC_MODE_1_NUM                                                         ((jl_uint32)0x00000001U)
typedef union STATISTIC_MODE_1_u {
    struct {
        jl_uint32 mib_clear:1;                                              //[ 0: 0]
        jl_uint32 rsvd:3;                                                   //[ 3: 1]
        jl_uint32 mib_id:8;                                                 //[11: 4]
    } bf;
    jl_uint32 val[1];
} STATISTIC_MODE_1_t;

#define TX_PKT_CNT_OFFSET                                                            ((jl_uint32)0x00000018U)
#define TX_PKT_CNT_NUM                                                               ((jl_uint32)0x00000001U)
typedef union TX_PKT_CNT_u {
    struct {
        jl_uint64 tx_pkt_cnt:64;                                            //[63: 0]
    } bf;
    jl_uint32 val[2];
} TX_PKT_CNT_t;

#define TX_PKT_BYTE_CNT_OFFSET                                                       ((jl_uint32)0x0000001AU)
#define TX_PKT_BYTE_CNT_NUM                                                          ((jl_uint32)0x00000001U)
typedef union TX_PKT_BYTE_CNT_u {
    struct {
        jl_uint64 tx_pkt_byte_cnt:64;                                       //[63: 0]
    } bf;
    jl_uint32 val[2];
} TX_PKT_BYTE_CNT_t;

#define TX_PKT_UC_CNT_OFFSET                                                         ((jl_uint32)0x0000001CU)
#define TX_PKT_UC_CNT_NUM                                                            ((jl_uint32)0x00000001U)
typedef union TX_PKT_UC_CNT_u {
    struct {
        jl_uint64 tx_pkt_uc_cnt:64;                                         //[63: 0]
    } bf;
    jl_uint32 val[2];
} TX_PKT_UC_CNT_t;

#define TX_PKT_UC_BYTE_CNT_OFFSET                                                    ((jl_uint32)0x0000001EU)
#define TX_PKT_UC_BYTE_CNT_NUM                                                       ((jl_uint32)0x00000001U)
typedef union TX_PKT_UC_BYTE_CNT_u {
    struct {
        jl_uint64 tx_pkt_uc_byte_cnt:64;                                    //[63: 0]
    } bf;
    jl_uint32 val[2];
} TX_PKT_UC_BYTE_CNT_t;

#define TX_PKT_MC_CNT_OFFSET                                                         ((jl_uint32)0x00000020U)
#define TX_PKT_MC_CNT_NUM                                                            ((jl_uint32)0x00000001U)
typedef union TX_PKT_MC_CNT_u {
    struct {
        jl_uint64 tx_pkt_mc_cnt:64;                                         //[63: 0]
    } bf;
    jl_uint32 val[2];
} TX_PKT_MC_CNT_t;

#define TX_PKT_MC_BYTE_CNT_OFFSET                                                    ((jl_uint32)0x00000022U)
#define TX_PKT_MC_BYTE_CNT_NUM                                                       ((jl_uint32)0x00000001U)
typedef union TX_PKT_MC_BYTE_CNT_u {
    struct {
        jl_uint64 tx_pkt_mc_byte_cnt:64;                                    //[63: 0]
    } bf;
    jl_uint32 val[2];
} TX_PKT_MC_BYTE_CNT_t;

#define TX_PKT_BC_CNT_OFFSET                                                         ((jl_uint32)0x00000024U)
#define TX_PKT_BC_CNT_NUM                                                            ((jl_uint32)0x00000001U)
typedef union TX_PKT_BC_CNT_u {
    struct {
        jl_uint64 tx_pkt_bc_cnt:64;                                         //[63: 0]
    } bf;
    jl_uint32 val[2];
} TX_PKT_BC_CNT_t;

#define TX_PKT_BC_BYTE_CNT_OFFSET                                                    ((jl_uint32)0x00000026U)
#define TX_PKT_BC_BYTE_CNT_NUM                                                       ((jl_uint32)0x00000001U)
typedef union TX_PKT_BC_BYTE_CNT_u {
    struct {
        jl_uint64 tx_pkt_bc_byte_cnt:64;                                    //[63: 0]
    } bf;
    jl_uint32 val[2];
} TX_PKT_BC_BYTE_CNT_t;

#define TX_PKT_DRP_CNT_OFFSET                                                        ((jl_uint32)0x00000028U)
#define TX_PKT_DRP_CNT_NUM                                                           ((jl_uint32)0x00000001U)
typedef union TX_PKT_DRP_CNT_u {
    struct {
        jl_uint32 tx_pkt_drp_cnt:32;                                        //[31: 0]
    } bf;
    jl_uint32 val[1];
} TX_PKT_DRP_CNT_t;

#define TX_PKT_ERR_CNT_OFFSET                                                        ((jl_uint32)0x00000029U)
#define TX_PKT_ERR_CNT_NUM                                                           ((jl_uint32)0x00000001U)
typedef union TX_PKT_ERR_CNT_u {
    struct {
        jl_uint32 tx_pkt_err_cnt:32;                                        //[31: 0]
    } bf;
    jl_uint32 val[1];
} TX_PKT_ERR_CNT_t;

#define RX_PKT_CNT_OFFSET                                                            ((jl_uint32)0x0000002AU)
#define RX_PKT_CNT_NUM                                                               ((jl_uint32)0x00000001U)
typedef union RX_PKT_CNT_u {
    struct {
        jl_uint64 rx_pkt_cnt:64;                                            //[63: 0]
    } bf;
    jl_uint32 val[2];
} RX_PKT_CNT_t;

#define RX_PKT_BYTE_CNT_OFFSET                                                       ((jl_uint32)0x0000002CU)
#define RX_PKT_BYTE_CNT_NUM                                                          ((jl_uint32)0x00000001U)
typedef union RX_PKT_BYTE_CNT_u {
    struct {
        jl_uint64 rx_pkt_byte_cnt:64;                                       //[63: 0]
    } bf;
    jl_uint32 val[2];
} RX_PKT_BYTE_CNT_t;

#define RX_PKT_UC_CNT_OFFSET                                                         ((jl_uint32)0x0000002EU)
#define RX_PKT_UC_CNT_NUM                                                            ((jl_uint32)0x00000001U)
typedef union RX_PKT_UC_CNT_u {
    struct {
        jl_uint64 rx_pkt_uc_cnt:64;                                         //[63: 0]
    } bf;
    jl_uint32 val[2];
} RX_PKT_UC_CNT_t;

#define RX_PKT_UC_BYTE_CNT_OFFSET                                                    ((jl_uint32)0x00000030U)
#define RX_PKT_UC_BYTE_CNT_NUM                                                       ((jl_uint32)0x00000001U)
typedef union RX_PKT_UC_BYTE_CNT_u {
    struct {
        jl_uint64 rx_pkt_uc_byte_cnt:64;                                    //[63: 0]
    } bf;
    jl_uint32 val[2];
} RX_PKT_UC_BYTE_CNT_t;

#define RX_PKT_MC_CNT_OFFSET                                                         ((jl_uint32)0x00000032U)
#define RX_PKT_MC_CNT_NUM                                                            ((jl_uint32)0x00000001U)
typedef union RX_PKT_MC_CNT_u {
    struct {
        jl_uint64 rx_pkt_mc_cnt:64;                                         //[63: 0]
    } bf;
    jl_uint32 val[2];
} RX_PKT_MC_CNT_t;

#define RX_PKT_MC_BYTE_CNT_OFFSET                                                    ((jl_uint32)0x00000034U)
#define RX_PKT_MC_BYTE_CNT_NUM                                                       ((jl_uint32)0x00000001U)
typedef union RX_PKT_MC_BYTE_CNT_u {
    struct {
        jl_uint64 rx_pkt_mc_byte_cnt:64;                                    //[63: 0]
    } bf;
    jl_uint32 val[2];
} RX_PKT_MC_BYTE_CNT_t;

#define RX_PKT_BC_CNT_OFFSET                                                         ((jl_uint32)0x00000036U)
#define RX_PKT_BC_CNT_NUM                                                            ((jl_uint32)0x00000001U)
typedef union RX_PKT_BC_CNT_u {
    struct {
        jl_uint64 rx_pkt_bc_cnt:64;                                         //[63: 0]
    } bf;
    jl_uint32 val[2];
} RX_PKT_BC_CNT_t;

#define RX_PKT_BC_BYTE_CNT_OFFSET                                                    ((jl_uint32)0x00000038U)
#define RX_PKT_BC_BYTE_CNT_NUM                                                       ((jl_uint32)0x00000001U)
typedef union RX_PKT_BC_BYTE_CNT_u {
    struct {
        jl_uint64 rx_pkt_bc_byte_cnt:64;                                    //[63: 0]
    } bf;
    jl_uint32 val[2];
} RX_PKT_BC_BYTE_CNT_t;

#define RX_PKT_DRP_CNT_OFFSET                                                        ((jl_uint32)0x0000003AU)
#define RX_PKT_DRP_CNT_NUM                                                           ((jl_uint32)0x00000001U)
typedef union RX_PKT_DRP_CNT_u {
    struct {
        jl_uint32 rx_pkt_drp_cnt:32;                                        //[31: 0]
    } bf;
    jl_uint32 val[1];
} RX_PKT_DRP_CNT_t;

#define RX_PKT_CRC_ERR_CNT_OFFSET                                                    ((jl_uint32)0x0000003BU)
#define RX_PKT_CRC_ERR_CNT_NUM                                                       ((jl_uint32)0x00000001U)
typedef union RX_PKT_CRC_ERR_CNT_u {
    struct {
        jl_uint32 rx_pkt_crc_err_cnt:32;                                    //[31: 0]
    } bf;
    jl_uint32 val[1];
} RX_PKT_CRC_ERR_CNT_t;

#define RX_FRAG_ERR_CNT_OFFSET                                                       ((jl_uint32)0x0000003CU)
#define RX_FRAG_ERR_CNT_NUM                                                          ((jl_uint32)0x00000001U)
typedef union RX_FRAG_ERR_CNT_u {
    struct {
        jl_uint32 rx_frag_err_cnt:32;                                       //[31: 0]
    } bf;
    jl_uint32 val[1];
} RX_FRAG_ERR_CNT_t;

#define TX_DATA_IN_CNT_OFFSET                                                        ((jl_uint32)0x0000003DU)
#define TX_DATA_IN_CNT_NUM                                                           ((jl_uint32)0x00000001U)
typedef union TX_DATA_IN_CNT_u {
    struct {
        jl_uint32 dp2mac_eop_cnt:4;                                         //[ 3: 0]
        jl_uint32 dp2mac_sop_cnt:4;                                         //[ 7: 4]
        jl_uint32 dp2mac_valid_cnt:8;                                       //[15: 8]
    } bf;
    jl_uint32 val[1];
} TX_DATA_IN_CNT_t;

#define RX_DATA_OUT_CNT_OFFSET                                                       ((jl_uint32)0x0000003EU)
#define RX_DATA_OUT_CNT_NUM                                                          ((jl_uint32)0x00000001U)
typedef union RX_DATA_OUT_CNT_u {
    struct {
        jl_uint32 mac2dp_eop_cnt:4;                                         //[ 3: 0]
        jl_uint32 mac2dp_sop_cnt:4;                                         //[ 7: 4]
        jl_uint32 mac2dp_valid_cnt:8;                                       //[15: 8]
    } bf;
    jl_uint32 val[1];
} RX_DATA_OUT_CNT_t;

#define TX_FIFO_MAX_DEPTH_OFFSET                                                     ((jl_uint32)0x0000003FU)
#define TX_FIFO_MAX_DEPTH_NUM                                                        ((jl_uint32)0x00000001U)
typedef union TX_FIFO_MAX_DEPTH_u {
    struct {
        jl_uint32 cfg_retry_buff_max_depth:7;                               //[ 6: 0]
    } bf;
    jl_uint32 val[1];
} TX_FIFO_MAX_DEPTH_t;

#define TX_FIFO_DEPTH_OFFSET                                                         ((jl_uint32)0x00000040U)
#define TX_FIFO_DEPTH_NUM                                                            ((jl_uint32)0x00000001U)
typedef union TX_FIFO_DEPTH_u {
    struct {
        jl_uint32 dbg_mactx_fifo_depth:7;                                   //[ 6: 0]
        jl_uint32 rsvd:1;                                                   //[ 7: 7]
        jl_uint32 dbg_retry_buff_waddr:7;                                   //[14: 8]
        jl_uint32 rsvd1:1;                                                   //[15:15]
        jl_uint32 dbg_retry_buff_raddr:7;                                   //[22:16]
    } bf;
    jl_uint32 val[1];
} TX_FIFO_DEPTH_t;

#define HALF_DUPLEX_STATUS_OFFSET                                                    ((jl_uint32)0x00000041U)
#define HALF_DUPLEX_STATUS_NUM                                                       ((jl_uint32)0x00000001U)
typedef union HALF_DUPLEX_STATUS_u {
    struct {
        jl_uint32 dbg_rx_abort_cnt:8;                                       //[ 7: 0]
        jl_uint32 dbg_tx_abort_cnt:8;                                       //[15: 8]
        jl_uint32 dbg_tx_retry_cnt:8;                                       //[23:16]
        jl_uint32 dbg_deplex_state:2;                                       //[25:24]
        jl_uint32 rsvd:2;                                                   //[27:26]
        jl_uint32 dbg_retry_cnt:4;                                          //[31:28]
    } bf;
    jl_uint32 val[1];
} HALF_DUPLEX_STATUS_t;

#define TX_LINK_CONTROL_OFFSET                                                       ((jl_uint32)0x00000042U)
#define TX_LINK_CONTROL_NUM                                                          ((jl_uint32)0x00000001U)
typedef union TX_LINK_CONTROL_u {
    struct {
        jl_uint64 mac_link_ignore:1;                                        //[ 0: 0]
        jl_uint64 mac_flush_en:1;                                           //[ 1: 1]
        jl_uint64 mac_link_filter_en:1;                                     //[ 2: 2]
        jl_uint64 rsvd:29;                                                  //[31: 3]
        jl_uint64 mac_link_filter_time:32;                                  //[63:32]
    } bf;
    jl_uint32 val[2];
} TX_LINK_CONTROL_t;

#define TX_LINK_STATUS_OFFSET                                                        ((jl_uint32)0x00000044U)
#define TX_LINK_STATUS_NUM                                                           ((jl_uint32)0x00000001U)
typedef union TX_LINK_STATUS_u {
    struct {
        jl_uint32 dbg_link_status:1;                                        //[ 0: 0]
        jl_uint32 rsvd:3;                                                   //[ 3: 1]
        jl_uint32 dbg_defer_latch:1;                                        //[ 4: 4]
        jl_uint32 rsvd1:3;                                                   //[ 7: 5]
        jl_uint32 dbg_mii_txen:1;                                           //[ 8: 8]
        jl_uint32 rsvd2:3;                                                   //[11: 9]
        jl_uint32 dbg_mii_rxdv:1;                                           //[12:12]
        jl_uint32 rsvd3:3;                                                   //[15:13]
        jl_uint32 dbg_mii_crs:1;                                            //[16:16]
        jl_uint32 rsvd4:3;                                                   //[19:17]
        jl_uint32 dbg_mii_col:1;                                            //[20:20]
    } bf;
    jl_uint32 val[1];
} TX_LINK_STATUS_t;

#endif /* __JL_REG_ETHMAC_H__ */

